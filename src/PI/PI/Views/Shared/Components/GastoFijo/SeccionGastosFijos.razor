@using PI.Models
@using PI.Handlers
@inject NavigationManager NavigationManager;


<div class="altura-seccion" id="seccion-pestañas" @onmouseover="actualizarMontoMensual">
    <div id="titulo-contenido">
        @*Aqui se agrega lo de las pestanas*@
        @if (hayPuestoSeleccionado == false)
        {
            <h1>Nuevo gasto fijo</h1>
        } else {
            <h1>Editar gasto fijo</h1>
        }

        @if (pestanyaConfiguracionActiva == true)
        {
            <div id="cuadro_configuracion">

                <form id="form_configuracion">
                    <div class="fila-form-configuracion">
                        <label>Nombre</label> <input name="" type="text" @bind="gastoFijoActivo.Nombre" placeholder="@placeHolderNombre">
                    </div>

                    <div class="fila-form-configuracion">
                        <label>Monto mensual</label> <input name="" type="number" step="any" @bind="gastoFijoActivo.Monto" placeholder="@placeHolderMonto">
                    </div>

                </form>
            </div>
        }   
    </div>
    <div id="inferior-horizontal">
        <div id="guardar-puesto" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosPuesto(gastoFijoActivo)">

                @if (hoverGuardar == false) {
                    <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                }
                @hoverTextGuardar
        </div>
    </div>
</div>

<div class="altura-seccion" id="seccion-puestos">
    <div class="totales"> 
        <div class="fila-form-configuracion">
            <label>Total mensual</label> <p> @((totalMensual).ToString()) </p>
        </div>
        <div class="fila-form-configuracion">

            <label>Total anual</label> <p> @((totalMensual * 12).ToString()) </p>
        </div>

    </div>
    @*Seccion de puestos donde se ven los puestos en cajas con organigrama*@

    <div id="mostrar-puestos">

        @foreach (GastoFijoModel gastoFijoActual in gastosFijos)
        {
            <div class="puesto-clickeable-eliminable" >
                <div @onclick="() => SeleccionarPuesto(gastoFijoActual)">
                    <GastoFijo gastoFijo=gastoFijoActual></GastoFijo>
                </div>
                <img @onclick="() => eliminarPuesto(gastoFijoActual)" class="puesto-icono-eliminar" src=img/puesto/trashCan.png>
            </div>
        }
    </div>
    <div id="agregar-puesto" class="transition" @onmouseover="() => Hover(1)" @onmouseout="() => HoverOut(1)" @onclick="AgregarNuevoPuesto">
        <a>
            @if (hoverAgregar == false)
            {
                <img src="img/estructuraOrg/addPuesto.png" alt="">
            }
            @hoverTextAgregar
            </a>
    </div>
</div>


@code {
    [Parameter]
    public List<GastoFijoModel> gastosFijos { get; set; }

    [Parameter]
    public DateTime fechaAnalasis { get; set; }

    [Parameter]
    public decimal totalMensual { get; set; }

    public bool hayPuestoSeleccionado = false;
    public GastoFijoModel gastoFijoActivo = new GastoFijoModel();

    public GastoFijoHandler HandlerGastoFijo = new GastoFijoHandler();

    public string copiaNombreOriginal = "";

    public string placeHolderNombre = "Ingresar nombre";
    public string placeHolderMonto = "Ingresar monto";

    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";

    public bool hoverGuardar = false;
    public bool hoverAgregar = false;

    bool pestanyaConfiguracionActiva = true;

    public void Hover(int action)
    {

        if (action == 1) {
            hoverTextAgregar = "Agregar gasto fijo";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        }
    }
    public void HoverOut(int action)
    {
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        } else {
            hoverGuardar = false;
            hoverTextGuardar = "";
        }
    }

    public void SeleccionarPuesto(GastoFijoModel puestoSeleccionado)
    {
        gastoFijoActivo = puestoSeleccionado;
        placeHolderNombre = gastoFijoActivo.Nombre;
        placeHolderMonto = gastoFijoActivo.Monto.ToString();
        copiaNombreOriginal = gastoFijoActivo.Nombre;
        hayPuestoSeleccionado = true;

    }

    public void AgregarNuevoPuesto() {
        placeHolderNombre = "Ingresar nombre";
        placeHolderMonto = "Ingresar salario";
        hayPuestoSeleccionado = false;
        pestanyaConfiguracionActiva = true;
        copiaNombreOriginal = "";
        gastoFijoActivo = new GastoFijoModel();
    }

    public void GuardarDatosPuesto(GastoFijoModel puestoGuardar) {

        puestoGuardar.FechaAnalisis = fechaAnalasis;
        HandlerGastoFijo.ingresarGastoFijo(copiaNombreOriginal, puestoGuardar.Nombre, puestoGuardar.Monto.ToString(), puestoGuardar.FechaAnalisis);
        if (hayPuestoSeleccionado == false)
        {
            gastoFijoActivo = new GastoFijoModel();
        }
        copiaNombreOriginal = string.Empty;
        actualizarMontoMensual();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); 
    }
    public void eliminarPuesto(GastoFijoModel puestoEliminar)
    {
        HandlerGastoFijo.eliminarGastoFijo(puestoEliminar.Nombre, puestoEliminar.FechaAnalisis);
        actualizarMontoMensual();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    public void actualizarMontoMensual () {
        this.totalMensual = HandlerGastoFijo.obtenerTotalMensual(this.fechaAnalasis);
    }
}
