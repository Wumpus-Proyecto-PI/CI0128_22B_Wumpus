@using PI.Models;
@using PI.Handlers;
@using System.Globalization
@using PI.Services
@inject NavigationManager NavigationManager;

<!-- Representa la sección de la inversión inicial -->

<div id="seccion-gastosVar"> <!-- Contenedor de tarjetas -->
    <div class="w-100 text-center">
        <h2 class="fw-bold mt-3">Gastos iniciales</h2>

        <!-- Sección del monto total -->
        <div class="total pe-none">
            <div class="fila-total">
                <label>Total</label>
                <p>
                    @(String.Format(CultureInfo.InvariantCulture, "{0:#,##0.00}", montoTotal))
                </p>
            </div>
        </div>
    </div>

    <div class="container-fluid d-flex flex-wrap justify-content-center p-1">
	    <!-- Crea las tarjetas -->
        @foreach (GastoInicialModel gastoInicial in GastosIniciales)
	    {
            <div class="gasto-clickeable" @onclick="() => AsignarGastoActivo(gastoInicial)">
			    <div>
				    <CardGastoInicial GastoInicial=gastoInicial></CardGastoInicial>
			    </div>
		    </div>
	    }
    </div>
    @*Botón de agregar un gasto inicial*@
	<div class="boton-container">
        <div class="boton-agregar"     
            @onmouseover="() => Hover(1)" 
            @onmouseout="() => HoverOut(1)"
            @onclick="AgregarNuevoGasto">
            <a>
                @if (hoverAgregar == false)
                {
                    <img src="img/estructuraOrg/addPuesto.png" alt="">
                }
                @hoverTextAgregar
            </a>
        </div>
    </div>
</div>
@if (PopupVisible == true)
{
    @* Background oscuro cuando abre popup *@
    <div class="overlay position-absolute" @onclick="cambiarEstadoPopup"></div>

    @* Tarjeta del popup *@
    <section class="card card-popup position-fixed d-flex justify-content-center align-items-center align-self-auto position-absolute p-3">
		<div class="card-body d-flex flex-column justify-content-center">
            @if (GastoEsSeleccionado)
            {
                <h2 class="card-title text-center pt-4 fw-bold">Editar gasto inicial</h2>
            } else {
                <h2 class="card-title text-center pt-4 fw-bold">Crear gasto inicial</h2>
            }

			<div class="d-flex flex-column justify-content-center align-items-center">
				@* Form *@
                <div class="entrada-datos d-flex flex-column">
                    <div class="d-flex">
                        @*Form para agregar el nombre del gasto variable*@
                        <label for="nombre-gasto">Nombre</label>
                        <input id="nombre-gasto" type="text" @bind="GastoInicialActivo.Nombre" placeholder="Nombre del gasto" maxlength="29">
                    </div>
                    <span class="msg-error">
                        @((MarkupString)ErrorNombre) @*Mensaje de error*@
                    </span>

                    <div class="d-flex m-2">
                    @*Form para agregar el nombre del gasto variable*@
                    <label for="monto-gasto">Monto</label>
                        <input id="monto-gasto" type="number" step="any" min="0" @bind="GastoInicialActivo.Monto" placeholder="Monto del gasto">
                    </div>
                    <span class="msg-error">
                        @((MarkupString)ErrorMonto) @*Mensaje de error*@
                    </span>
                </div>
				@* Botones guardar y borrar *@
				<div class="d-flex my-2">

                    @*Botón borrar*@
                    @if (GastoEsSeleccionado)
                    {
                        <div id="boton-eliminar" class="boton-guardar-eliminar" @onmouseover="() => Hover(3)" @onmouseout="() => HoverOut(3)" @onclick="EliminarGastoInicial">
                            <a>
                                @if (hoverEliminar == false)
                                {
                                    <img src="img/generic/trashCan.png" alt="">
                                }
                                @hoverTextEliminar
                            </a>
                        </div>

                    }
                    @*Botón guardar*@

                    <div class="boton-guardar-eliminar" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="guardarGastoInicial">
                        <a>
                            @if (hoverGuardar == false)
                            {
                                <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                            }
                            @hoverTextGuardar
                        </a>
                    </div>

				</div>
			</div>
			@* Permite cerrar al popup con una "x" *@
			<div id="salir-popup">
				<img src="img/estructuraOrg/x.png" alt="" width="15px" height="15px" @onclick="cambiarEstadoPopup">
			</div>
		</div>
	</section>
 }


@code {
    // Gastos iniciales del análisis.
    [Parameter]
    public List<GastoInicialModel>? GastosIniciales { get; set; }

    // Fecha del análisis al que pertenecen los gastos iniciales
    [Parameter]
    public string fechaAnalisis { get; set; }

    [Parameter]
    public decimal montoTotal { get; set; }

    // Gasto inicial que es accedido/clickeado.
    public GastoInicialModel? GastoInicialActivo = null;

    InversionInicialHandler inversionInicialHandler = new InversionInicialHandler();

    // Strings que muestran los mensajes de error con respecto al nombre y monto
    public string ErrorNombre = "";
    public string ErrorMonto = "";

    // Nombre anterior del modelo (sirve para borrado en la BD)
    public string NombreAnterior = "";

    // Indica si se está editando o creando un gasto
    public bool GastoEsSeleccionado = false;

    // Variables para agregar y quitar texto al hacer hover en botones de guardar, agregar y eliminar
    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";
    public string hoverTextEliminar = "";

    // Booleanos para el control de los hover en botones guardar y agregar
    public bool hoverGuardar = false;
    public bool hoverAgregar = false;
    public bool hoverEliminar = false;

    // bool que indica si se debe mostrar el popup de componente
    public bool PopupVisible { get; set; } = false;

    // Cambia el popup de visible a invisible y viceversa
    public void cambiarEstadoPopup(){
        ActualizarMontoTotal();
        PopupVisible = !PopupVisible;
        if (PopupVisible == false) {
            // se recarga la página para que se vean los cambios
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    // Actualiza el monto total de los gastos iniciales.
    public decimal ActualizarMontoTotal() {
        return inversionInicialHandler.ObtenerMontoTotal(fechaAnalisis);
    }
    // Asigna al atributo gastoActivo el gasto que ha sido clickeado.
    public void AsignarGastoActivo(GastoInicialModel GastoSeleccionado)
    {
        GastoInicialActivo = GastoSeleccionado;
        NombreAnterior = GastoSeleccionado.Nombre;
        GastoEsSeleccionado = true;
        ErrorNombre = "";
        ErrorMonto = "";
        cambiarEstadoPopup();
    }

    // Se invoca cuando clickean el botón de agregar. Crea un nuevo modelo y abre el popup.
    public void AgregarNuevoGasto()
    {
        cambiarEstadoPopup();
        GastoInicialActivo = new GastoInicialModel();
    }

    // Invoca la inserción a la base de datos del gasto activo.
    public void guardarGastoInicial() {
        if (SonDatosValidos()) {
            // Elimina el gasto de la base, de ser uno existente.
            if (GastoEsSeleccionado) {
                inversionInicialHandler.EliminarGastoInicial(fechaAnalisis, NombreAnterior);
            }
            inversionInicialHandler.IngresarGastoInicial(fechaAnalisis, GastoInicialActivo);
            
            GastoEsSeleccionado = false;
            // se recarga la página para que se vean los cambios
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    // Realiza la validación de los datos ingresados por el usuario.
    public bool SonDatosValidos() {
        bool resultado = true;
        ErrorNombre = "";
        ErrorMonto = "";
        // Caso en que se esté editando un gasto existente.
        if (GastoEsSeleccionado) {
            int frecuenciaDelNombre = GastosIniciales.FindAll(x => x.Nombre.ToLower() == GastoInicialActivo.Nombre.ToLower()).Count();            
            if (frecuenciaDelNombre > 1) {
                ErrorNombre = "Error al guardar. Ya existe un gasto inicial con ese nombre";
                resultado = false;
            }
        // Caso en que está creando y el nombre ya está en la lista
        } else if (GastosIniciales.Exists(x => x.Nombre == GastoInicialActivo.Nombre)) {
            ErrorNombre = "Error: ya existe un gasto inicial con ese nombre";
            resultado = false;
        }

        // Valida el número
        if (!FormatManager.ValidarInputDecimal(GastoInicialActivo.Monto))
        {
            resultado = false;
            ErrorMonto = "Error: el monto debe ser un número positivo y tener 18 dígitos como máximo";
        }

        return resultado;
    }

    // Invoca la eliminación a la base de datos del gasto activo.
    public void EliminarGastoInicial() {
        inversionInicialHandler.EliminarGastoInicial(fechaAnalisis, NombreAnterior);
        // se recarga la página para que se vean los cambios
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    // método para controlar el hover de los botones guardar y agregar
    public void Hover(int action)
    {
        // este metodo quita la imagen y agrega el texto correspondiente
        // recibe un int para diferenciar si es el hover del botón de guardar (1) o de agregar (2)
        if (action == 1)
        {
            hoverTextAgregar = "Agregar gasto inicial";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        }
        else if (action == 3)
        {
            hoverEliminar = true;
            hoverTextEliminar = "Eliminar gasto inicial";
        }
    }

    // método para controlar el cuando se quita el hover de los botones guardar y agregar
    public void HoverOut(int action)
    {
        // este metodo agrega la imagen y quita el texto correspondiente
        // recibe un int para diferenciar si es el quitar hover del botón de guardar (1) o de agregar (2)
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        }
        else if (action == 2)
        {
            hoverGuardar = false;
            hoverTextGuardar = "";
        }
        else if (action == 3)
        {
            hoverEliminar = false;
            hoverTextEliminar = "";
        }
    }
}