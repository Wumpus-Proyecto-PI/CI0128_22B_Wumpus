@using PI.Models
@using PI.Handlers
@inject NavigationManager NavigationManager;

@*@if (popUpVisible) {*@

    <div id="contenedor_beneficios">
        <h1 id="titulo_beneficios" >Beneficios</h1>
        <table id=lista_beneficios>
            <tr>
                <th style ="border:none;">Nombre</th>
                <th style="border:none;">Monto</th>
                <th style="border:none;"> Plazas </th>
            <th style="border:none;" width="40px"></th>
            </tr>
            @for(int i = 0; i < puesto.Beneficios.Count(); i += 1)
            {
                int index = i;

                    <tr class="filas_tabla_beneficio">
                        <td> @puesto.Beneficios[i].nombreBeneficio</td>
                        <td> @puesto.Beneficios[i].monto</td>
                        <td> @puesto.Beneficios[i].plazasPorBeneficio </td>
                        <td class="columna-borrar-beneficio"><div class="borrar-beneficio" @onclick="()=>borrarBeneficio(puesto.Beneficios[index])"><img src="img/puesto/trashCan.png" width="35px" height="35px"></div></td>
                     </tr>
            }
            @((MarkupString)html)
        </table>
        @if (formVisible)
        {   <h2>Nuevo beneficio</h2>
            <div id="tabla_form">
                    <input id = "input_nombre_beneficio" placeholder="NombreBeneficio" @bind="comodin.nombreBeneficio">
                    <input id = "input_monto_beneficio" placeholder="Monto" type="number" @bind="comodin.monto">
                    <input id = "input_plazas_beneficio" placeholder="Plazas" type="number" @bind="comodin.plazasPorBeneficio">
                    <button id = "boton_agregar_beneficio" @onclick="agregarBeneficioNuevo">Agregar</button>
            </div>
        }
            <div id="botones_beneficios">
                <button id="boton-agregar-beneficio" @onclick="cambiarVisibilidadForm">Agregar Beneficio</button>
                <button id="boton-guardar-datos" @onclick="refrescarPagina"> Guardar Cambios</button>
            </div>
    </div>
@*}*@
@code {
    [Parameter]
    public PuestoModel puesto { get; set; } = new PuestoModel();

    [Parameter]
    public DateTime fechaAnali { get; set; }

    public BeneficioModel comodin = new BeneficioModel();

    public bool formVisible = false;

    public string html = "";

    Queue<Tuple<BeneficioModel, int>> cambiosBeneficios = new Queue<Tuple<BeneficioModel, int>>();

    public void agregarBeneficioNuevo()
    {
        EstructuraOrgHandler h = new EstructuraOrgHandler();
        comodin.fechaAnalisis = fechaAnali;
        comodin.nombrePuesto = puesto.Nombre;
        formVisible = false;
        puesto.Beneficios.Add(comodin);
        h.AgregarBeneficio(comodin);
    }


    public void borrarBeneficio(BeneficioModel b) {
        b.fechaAnalisis = puesto.FechaAnalisis;
        b.nombrePuesto = puesto.Nombre;
        EstructuraOrgHandler h = new EstructuraOrgHandler();
        puesto.Beneficios.Remove(b);
        h.BorrarBeneficio(b);

    }

    public void cambiarVisibilidadForm()
    {
        if (formVisible)
        {
            formVisible = false;
        }
        else
        {
            formVisible = true;
        }
    }
    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";

    public bool hoverGuardar = false;
    public bool hoverAgregar = false;

    public void Hover(int action)
    {

        if (action == 1) {
            hoverTextAgregar = "Agregar Beneficio";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        }
    }
    public void HoverOut(int action)
    {
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        } else {
            hoverGuardar = false;
            hoverTextGuardar = "";
        }
    }

    public void refrescarPagina() { 
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}