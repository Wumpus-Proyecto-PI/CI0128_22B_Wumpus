@using PI.Handlers
@using PI.Models
@using PI.Services
@using System.Globalization


    <div class="container text-center mt-5">

    <div id="container-forms-top">
        <div id="form-parametros-rentabilidad">
            <div class="pill-form">
               <div><h5>Ganancia mensual</h5></div>
                <input id="form-ganancia-mensual" type="text" class="form-control" @bind="analisis.GananciaMensual" @onfocusout = "actualizarGananciaMensual">
            </div>
            <div class="pill-form">
                <div><h5>Gastos fijos</h5></div>
                <input id="form-gastos-fijos-totales" type="text" class="form-control" placeholder=@IOManager.ToFormatoEstadistico(montoGastosFijos)  readonly>
            </div>
        </div>
        <div class="switch-container">
                <span class="switch-text">@opcionSwitch</span>
            <input type="checkbox" class="switch_1" @onclick="switchMetaVentas">
        </div>
    </div>
    <ul class="responsive-table">
        <li class="table-header">
            <div class="col col-1">
                <p class="datos-header">Nombre de producto</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Porcentaje de Ventas</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Precio</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Margen</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Punto Equilibrio</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Meta de ventas</p>
            </div>
        </li>

            <li class="table-row-totales">
                <div class="col col-1" data-label="Nombre">
                    <p class="datos-calculados texto-nombres">Totales</p>
                </div>
                <div class="col col-1" data-label="% Ventas">
                    @getPorcentajeVentasTotal() %
                </div>
                <div class="col col-1" data-label="Precio">
                    -
                </div>
                <div class="col col-1" data-label="Margen">
                    -
                </div>
                <div class="col col-1" data-label="Punto Eq">
                    <p>@IOManager.ToFormatoEstadistico(calcularPuntoEquilibrioTotal(montoGastosFijos,productos))</p>
                </div>
                <div class="col col-1" data-label="Meta">
                    @if (@opcionSwitchBool) {
                    <p class="datos-calculados">@IOManager.ToFormatoEstadistico(actualizarTotalMetaUnidades())</p>
                } else {
                    <p class="datos-calculados">@IOManager.ToFormatoEstadistico(actualizarTotalMetaMoneda())</p>
                }
            </div>
        </li>

        @foreach (var productoActual in productos)
        {
            <li class="table-row">
                <div class="col col-1" data-label="Nombre">
                    <p class="datos-calculados texto-nombres">@productoActual.Nombre</p>
                </div>
                <div class="col col-1" data-label="% Ventas">
                    <input class="effect-1 text-center" type="number" min="0" max="@getPorcentajeVentasDisponible(productoActual)" @bind="productoActual.PorcentajeDeVentas" @onfocusout="() => actualizarPorcentajeVentas(productoActual)">%
                    <span class="focus-border"></span>
                </div>
                <div class="col col-1" data-label="Precio">
                    <input class="effect-1 text-center" type="number" @bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)">
                    <span class="focus-border"></span>
                </div>
                <div class="col col-1" data-label="Margen">
                    @*TODO: se debe enviar el costo variable total del producto en lugar de 100*@
                    <p class="datos-calculados">@IOManager.ToFormatoEstadistico(calcularMargen(productoActual))</p>
                </div>
                <div class="col col-1" data-label="Punto Eq">
                    <p class="datos-calculados">@IOManager.ToFormatoEstadistico(calcularPuntoEquilibrio(montoGastosFijos,productoActual.Precio,productoActual.CostoVariable))</p>
                </div>
                <div class="col col-1" data-label="Meta">
                    @*TODO: se debe mostrar solo el valor en unidades o en moneda segun el estado de un switch/boton*@ 
                    @*TODO: se debe enviar el costo variable total del producto en lugar de 100*@
                    @if (@opcionSwitchBool)
                    {
                        <p class="datos-calculados">@(IOManager.ToFormatoEstadistico(calcularMetaUnidades(productoActual)))</p>
                    }
                    else
                    {
                        <p class="datos-calculados">@(IOManager.ToFormatoEstadistico(calcularMetaMoneda(productoActual)))</p>
                    }
                </div>
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public List<ProductoModel> productos { get; set; }

    [Parameter]
    public AnalisisModel analisis { get; set; }

    [Parameter]
    public decimal montoGastosFijos { get; set; }

    public bool opcionSwitchBool = true;

    public int puntoEquilibrioTotal { get; set; }

    public string opcionSwitch = "Meta en unidades";

    public string opcionUnidades = "Meta en unidades";
    public string opcionMoneda = "Meta en moneda";

    public void switchMetaVentas() {
        if (!opcionSwitchBool) {
            opcionSwitch = "Meta en unidades";
            opcionSwitchBool = true;
        }
        else {
            opcionSwitch = "Meta en moneda";
            opcionSwitchBool = false;
        }
    }
    public decimal puntoEquilibrio { get; set; }


    public ProductoHandler productoHandler = new ProductoHandler();

    public void actualizarGananciaMensual()
    {
        AnalisisHandler handler = new AnalisisHandler();
        handler.ActualizarGananciaMensual(analisis.GananciaMensual, analisis.FechaCreacion);
    }

    public void actualizarPorcentajeVentas(ProductoModel producto)
    {
        decimal porcentajeActual = producto.PorcentajeDeVentas;
        decimal disponible = getPorcentajeVentasDisponible(producto);

        if (porcentajeActual >= 0 && porcentajeActual <= disponible)
        {
            productoHandler.actualizarPorcentajeVentas(producto, producto.FechaAnalisis);

        } else {
            producto.PorcentajeDeVentas = productoHandler.obtenerPorcentajeVentas(analisis.FechaCreacion, producto.Nombre);
        }
    }

    public decimal getPorcentajeVentasTotal() 
    {
        return productoHandler.obtenerPorcentajeVentasTotal(analisis.FechaCreacion);
    }

    public decimal getPorcentajeVentasDisponible(ProductoModel producto)
    {
        return 100 - getPorcentajeVentasTotal() + productoHandler.obtenerPorcentajeVentas(analisis.FechaCreacion, producto.Nombre);
    }

    public void actualizarPrecio(ProductoModel producto)
    {
        productoHandler.actualizarPrecio(producto, producto.FechaAnalisis);
    }

    public decimal calcularMargen(ProductoModel productoActual) {

        return AnalisisRentabilidadService.CalcularMargen(productoActual.Precio, productoActual.CostoVariable);
    }

    public int calcularMetaUnidades(ProductoModel productoActual)
    {
        decimal margen = AnalisisRentabilidadService.CalcularMargen(productoActual.Precio, productoActual.CostoVariable);

        decimal margenPonderado = AnalisisRentabilidadService.CalcularMargenPonderado(productoActual.PorcentajeDeVentas, margen);

        return AnalisisRentabilidadService.CalcularMetaVentasUnidades(productoActual.PorcentajeDeVentas, this.montoGastosFijos, this.analisis.GananciaMensual, margenPonderado);
    }

    public decimal calcularMetaMoneda(ProductoModel productoActual)
    {
        decimal margen = AnalisisRentabilidadService.CalcularMargen(productoActual.Precio, productoActual.CostoVariable);

        decimal margenPonderado = AnalisisRentabilidadService.CalcularMargenPonderado(productoActual.PorcentajeDeVentas, margen);

        int metaVentasUnidad = AnalisisRentabilidadService.CalcularMetaVentasUnidades(productoActual.PorcentajeDeVentas, this.montoGastosFijos, this.analisis.GananciaMensual, margenPonderado);

        return AnalisisRentabilidadService.CalcularMetaVentasMoneda(productoActual.Precio, metaVentasUnidad);
    }

    public int actualizarTotalMetaUnidades() {
        int total = 0;

        foreach (ProductoModel productActual in productos)
        {
            // TODO: se debe enviar el costo variable total del producto en lugar de 100
            total += this.calcularMetaUnidades(productActual);
        }
        return total;
    }

    public decimal actualizarTotalMetaMoneda()
    {
        decimal total = 0.0m;

        foreach (ProductoModel productActual in productos)
        {
            // TODO: se debe enviar el costo variable total del producto en lugar de 100
            total += this.calcularMetaMoneda(productActual);
        }
        return total;
    }

    public int calcularPuntoEquilibrio(decimal montoGastosFijos, decimal precio, decimal costoVariable)
    {
        int result = Decimal.ToInt32(AnalisisRentabilidadService.CalcularPuntoEquilibrio(montoGastosFijos, precio, costoVariable));
        return result;
    }

    public int calcularPuntoEquilibrioTotal(decimal gastosFijos, List<ProductoModel> productos)
    {
        int result = 0;
        for (int i = 0; i < productos.Count; i += 1)
        {
            result += calcularPuntoEquilibrio(gastosFijos, productos[i].Precio, productos[i].CostoVariable);
        }
        return result;
    }

}