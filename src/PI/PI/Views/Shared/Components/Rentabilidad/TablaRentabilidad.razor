@using PI.EntityModels
@using PI.EntityHandlers
@using PI.Services
@using System.Globalization
@inject PI.EntityHandlers.ProductoHandler HandlerProducto;
@inject PI.EntityHandlers.AnalisisHandler HandlerAnalisis;
@inject PI.Services.PasosProgresoControl PasosProgresoControl;
@inject AnalisisHandler AnalisisHandler;

<div class="d-flex flex-column">

<div class="d-flex col-9 justify-content-end mt-0">
        <BotonesFlujoPasos NumeroPasoActual=NumeroPasoActual NumeroPasoMaximo=NumeroPasoMaximo FechaAnalisis=FechaCreacion EnMarcha=EstadoAnalisis></BotonesFlujoPasos>
</div>
<div class="container text-center mt-5">
    <div id="container-forms-top">
        <div id="form-parametros-rentabilidad">
            <div class="pill-form">
                <div><h4>Ganancia mensual</h4></div>
                <input id="form-ganancia-mensual" type="number" min=0 style="font-size: larger" step="any" class="form-control" @bind="analisis.GananciaMensual" @onfocusout="actualizarGananciaMensual"/>
            </div>
            <div class="pill-form">
                <div><h4>Gastos fijos</h4></div>
                <input id="form-gastos-fijos-totales" style="font-size: larger" type="text" class="form-control pe-none" placeholder=@FormatManager.ToFormatoEstadistico(montoGastosFijosMensuales) disabled/>
            </div>
        </div>
        <div class="row">
            <div class="row">
                <div class="col d-flex justify-content-end">
                    <span class="switch-text">Representar en:</span>
                </div>
            </div>
            <div class="row mx-5">
                <div class="col d-flex justify-content-end">
                    <div class="switch-container">
                    @*<span class="switch-text">@opcionSwitch</span>*@
                    <div class="opcion-unidad">
                        <span class="switch-text">Unidad</span>
                        <img src="Images/simbolo_unidades.svg" />
                    </div>
                    <input type="checkbox" class="switch_1" @onclick="switchMetaVentas">
                    <div class="opcion-monto">
                        <span class="switch-text">Monto</span>
                        <img src="Images/simbolo_moneda.svg" />
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>
    @if (gananciaMensualValida == false)
    {
         <p>ERROR: El monto de ganancia mensual ingresado debe ser de 18 dígitos o menos. Ingréselo nuevamente.</p>   
    }
    <ul class="responsive-table">
            <li class="table-header li-tabla">
            <div class="col col-1">
                <p class="datos-header">Nombre de producto</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Porcentaje de ventas</p>
            </div>
            <div class="col col-1">
                <p>Precio</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Comision de ventas</p>
            </div>
            <div class="col col-1">
                <p>Margen</p>
            </div>
            <div class="col col-1">
                <p>Margen ponderado</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Punto Equilibrio</p>
            </div>
            <div class="col col-1">
                <p class="datos-header">Meta de ventas</p>
            </div>
        </li>

            <li class="table-row-totales li-tabla">
            <div class="col col-1" data-label="Nombre">
                <p class="datos-calculados texto-nombres">Totales</p>
            </div>
            <div class="col col-1" data-label="% Ventas">
                @porcentajeVentasTotal %
            </div>
            <div class="col col-1" data-label="Precio">
                -
            </div>
            <div class="col col-1" data-label="Comision">
                -
            </div>
            <div class="col col-1" data-label="Margen">
                -
            </div>
            <div class="col col-1" data-label="Margen ponderado">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(calcularMargenPonderadoTotal())</p>
            </div>
            <div class="col col-1" data-label="Punto Eq">
                    <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(calcularPuntoEquilibrioTotal(montoGastosFijosMensuales,productos))</p>
            </div>
            <div class="col col-1" data-label="Meta">
                @if (@opcionSwitchBool)
                {
                    <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(actualizarTotalMetaUnidades()) <img src="Images/simbolo_unidades.svg" /></p>
                }
                else
                {
                    <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(actualizarTotalMetaMoneda()) <img src="Images/simbolo_moneda.svg" /></p>
                }
            </div>
        </li>

        @foreach (var productoActual in productos)
        {
                <li class="table-row li-tabla">
                <div class="col col-1" data-label="Nombre">
                    <p class="datos-calculados texto-nombres">@productoActual.Nombre</p>
                </div>
                <div class="col col-1" data-label="% Ventas">
                    <input class="effect-1 text-center" type="text" maxlength=16 @bind="productoActual.PorcentajeDeVentas" @onfocusout=" async () => await actualizarPorcentajeVentas(productoActual)">%
                    <span class="focus-border"></span>
                </div>
                <div class="col col-1" data-label="Precio">
                    <input class="effect-1 text-center" type="text" maxlength=16 @bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)">
                    <span class="focus-border"></span>
                </div>
                <div class="col col-1" data-label="ComisionDeVentas">
                    <input class="effect-1 text-center" type="text" maxlength=16 @bind="productoActual.ComisionDeVentas" @onfocusout="() => actualizarComisionDeVentas(productoActual)">%
                    <span class="focus-border"></span>
                </div>
                <div class="col col-1" data-label="Margen">
                    <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(calcularMargen(productoActual))</p>
                </div>
                <div class="col col-1" data-label="Margen ponderado">
                    <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(calcularMargenPonderado(productoActual))</p>
                </div>
                <div class="col col-1" data-label="Punto Eq">
                    <p class="datos-calculados">@FormatManager.ToFormatoEstadistico(calcularPuntoEquilibrio(montoGastosFijosMensuales,(decimal)productoActual.Precio,actualizarCostoVariable(productoActual)))</p>
                </div>
                <div class="col col-1" data-label="Meta">
                    @if (@opcionSwitchBool)
                    {
                        <p class="datos-calculados">@(FormatManager.ToFormatoEstadistico(calcularMetaUnidades(productoActual))) <img src="Images/simbolo_unidades.svg" /></p>
                    }
                    else
                    {
                        <p class="datos-calculados">@(FormatManager.ToFormatoEstadistico(calcularMetaMoneda(productoActual))) <img src="Images/simbolo_moneda.svg" /></p>
                    }
                </div>
            </li>
        }
    </ul>
</div>
</div>

@code {
    // numero del paso actual. Se usa para el control de los botones de los pasos
    [Parameter]
    public int NumeroPasoActual { get; set; }

    // numero maximo de paso al que se puede acceder
    public int NumeroPasoMaximo { get; set; }

    public EntityModels.Analisis? AnalisisActual = null;

    [Parameter]
    public DateTime FechaCreacion { get; set; }

    [Parameter]
    public bool EstadoAnalisis { get; set; }

    // Lista de productos de la base de datos
    [Parameter]
    public List<Producto> productos { get; set; }

    [Parameter]
    public Analisis analisis { get; set; }

    [Parameter]
    public decimal montoGastosFijosMensuales { get; set; }

    public bool opcionSwitchBool = true;

    public int puntoEquilibrioTotal { get; set; }

    public bool gananciaMensualValida { get; set; } = true;

    public decimal puntoEquilibrio { get; set; }

    private decimal porcentajeVentasTotal;

    protected override async Task OnInitializedAsync()
    {
        porcentajeVentasTotal = await getPorcentajeVentasTotal();
        AnalisisActual = await AnalisisHandler.ObtenerUnAnalisis(FechaCreacion);
        await ActualizarBotonesControlPasos();
    }

    // Se cambia el estado del switch de la representacion de la meta de ventas
    public void switchMetaVentas()
    {
        if (opcionSwitchBool)
        {
            opcionSwitchBool = false;
        }
        else
        {
            opcionSwitchBool = true;
        }
    }

    // Metodo que actualiza la ganancia mensual en la base de datos
    public async Task actualizarGananciaMensual()
    {
        if (FormatManager.ValidarInputDecimal(analisis.GananciaMensual))
        {
            gananciaMensualValida = true;
            await HandlerAnalisis.ActualizarGanaciaMensual( Convert.ToDecimal(analisis.GananciaMensual), analisis.FechaCreacion);
        }
        else
        {
            gananciaMensualValida = false;
            //analisis.GananciaMensual = handler.ObtenerGananciaMensual(analisis.FechaCreacion);
        }
        await ActualizarBotonesControlPasos();

    }

    // Metodo que actualiza el porcentaje de ventas de un producto en la base de datos
    public async Task actualizarPorcentajeVentas(Producto producto)
    {
        decimal porcentajeActual = (decimal) producto.PorcentajeDeVentas;
        decimal disponible = await getPorcentajeVentasDisponible(producto);

        if (porcentajeActual >= 0 && porcentajeActual <= disponible)
        {
            await HandlerProducto.ActualizarPorcentajeVentas(producto, producto.FechaAnalisis);
            porcentajeVentasTotal = await getPorcentajeVentasTotal();
        }
        else
        {
            producto.PorcentajeDeVentas = await HandlerProducto.ObtenerPorcentajeVentas(analisis.FechaCreacion, producto.Nombre);
        }
        await ActualizarBotonesControlPasos();

    }

    // Metodo que retorna el porcentaje de ventas total de un analisis
    public async Task<decimal> getPorcentajeVentasTotal()
    {
        return await HandlerProducto.ObtenerPorcentajeVentasTotal(analisis.FechaCreacion);
    }

    // Metodo que calcula y retorna el porcentaje de ventas disponible
    public async Task<decimal> getPorcentajeVentasDisponible(Producto producto)
    {
        return 100 - await getPorcentajeVentasTotal() + await HandlerProducto.ObtenerPorcentajeVentas(analisis.FechaCreacion, producto.Nombre);
    }

    public async Task actualizarComisionDeVentas(Producto producto)
    {
        decimal comisionActual = (decimal) producto.ComisionDeVentas;
        if (comisionActual >= 0 && comisionActual <=100)
        {
            await HandlerProducto.ActualizarComision(producto, producto.FechaAnalisis);
        }
        else
        {
            producto.ComisionDeVentas = 0;
        }
        await ActualizarBotonesControlPasos();
    }

    public decimal actualizarCostoVariable(Producto producto) 
    {
        decimal comisionSegunPrecio = AnalisisRentabilidadService.CalcularComision((decimal)producto.Precio, (decimal)producto.ComisionDeVentas);
        decimal nuevoCosto = producto.CostoVariable + comisionSegunPrecio;

        return nuevoCosto;

    }

    // Metodo que actualiza el precio de un producto en la base de datos
    public async Task actualizarPrecio(Producto producto)
    {  
        decimal precioActual = (decimal) producto.Precio;
        if (precioActual >= 0)
        {
            await HandlerProducto.ActualizarPrecio(producto, producto.FechaAnalisis);
        }
        else
        {
            producto.Precio = 0;
        }
        await ActualizarBotonesControlPasos();

    }

    // Metodo que calcula y retorna el margen de un producto
    public decimal calcularMargen(Producto productoActual)
    {
        return AnalisisRentabilidadService.CalcularMargen((decimal)productoActual.Precio, actualizarCostoVariable(productoActual));
    }

    // Metodo que calcula y retorna el margen ponderado de un producto
    public decimal calcularMargenPonderado(Producto productoActual)
    {
        decimal margen = AnalisisRentabilidadService.CalcularMargen((decimal)productoActual.Precio, actualizarCostoVariable(productoActual));
        return AnalisisRentabilidadService.CalcularMargenPonderado((decimal)productoActual.PorcentajeDeVentas, margen);
    }

    // Metodo que calcula y retorna la meta en unidades de un producto
    public decimal calcularMetaUnidades(Producto productoActual)
    {
        decimal margenPonderadoTotal = this.calcularMargenPonderadoTotal();

        return AnalisisRentabilidadService.CalcularMetaVentasUnidad((decimal)productoActual.PorcentajeDeVentas, this.montoGastosFijosMensuales, (decimal)this.analisis.GananciaMensual, margenPonderadoTotal);
    }

    // Metodo que calcula y retorna la meta en moneda de un producto
    public decimal calcularMetaMoneda(Producto productoActual)
    {
        decimal margenPonderadoTotal = this.calcularMargenPonderadoTotal();

        decimal metaVentasUnidad = AnalisisRentabilidadService.CalcularMetaVentasUnidad((decimal)productoActual.PorcentajeDeVentas, this.montoGastosFijosMensuales, (decimal)this.analisis.GananciaMensual, margenPonderadoTotal);

        return AnalisisRentabilidadService.CalcularMetaVentasMoneda((decimal)productoActual.Precio, metaVentasUnidad);
    }

    // Metodo que actualiza la meta en unidades en la base de datos
    public decimal actualizarTotalMetaUnidades()
    {
        decimal total = 0;

        foreach (Producto productActual in productos)
        {
            total += this.calcularMetaUnidades(productActual);
        }
        return total;
    }

    // Metodo que actualiza la meta en moneda en la base de datos
    public decimal actualizarTotalMetaMoneda()
    {
        decimal total = 0.0m;

        foreach (Producto productActual in productos)
        {
            total += this.calcularMetaMoneda(productActual);
        }
        return total;
    }

    // Se encarga de calcular el punto de equilibrio de un solo producto
    public decimal calcularPuntoEquilibrio(decimal montoGastosFijosMensuales, decimal precio, decimal costoVariable)
    {
        decimal result = AnalisisRentabilidadService.CalcularPuntoEquilibrio(montoGastosFijosMensuales, precio, costoVariable);
        return result;
    }

    // Se encarga de calcular el punto de equilibrio total de todos los productos.
    public decimal calcularPuntoEquilibrioTotal(decimal gastosFijos, List<Producto> productos)
    {
        decimal result = 0;
        for (int i = 0; i < productos.Count; i += 1)
        {
            result += calcularPuntoEquilibrio(gastosFijos, (decimal)productos[i].Precio, actualizarCostoVariable(productos[i]));
        }
        return result;
    }

    // Se encarga de calcular el maregn ponderado total de todos los proudcto
    public decimal calcularMargenPonderadoTotal()
    {
        decimal result = 0.0m;
        decimal margenActual = 0.0m;
        foreach (var productoActual in productos)
        {
            margenActual = AnalisisRentabilidadService.CalcularMargen((decimal)productoActual.Precio, actualizarCostoVariable(productoActual));

            result += AnalisisRentabilidadService.CalcularMargenPonderado((decimal)productoActual.PorcentajeDeVentas, margenActual);
        }
        return result;
    }

    public async Task ActualizarBotonesControlPasos()
    {
        NumeroPasoMaximo = await PasosProgresoControl.EstaActivoMaximoAsync(AnalisisActual);
    }

}