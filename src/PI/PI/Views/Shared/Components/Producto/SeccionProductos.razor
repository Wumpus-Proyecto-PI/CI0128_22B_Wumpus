@using PI.Models
@using PI.Services
@using PI.Handlers
@using System.Globalization
@inject NavigationManager NavigationManager;


@*Comienzo de seccion de gastos variables*@
<div class="altura-seccion" id="seccion-gastosVar">
    <h1 class="fw-bold mt-3">Productos</h1>
    <div id="mostrar-gastosVar">
        @*Renderización de las tarjetas de los gastos variables, son componentes razor aparte*@
        @foreach (ProductoModel gastoActual in productos)
        {
            <div class="gasto-clickeable" @onclick="() => SeleccionarGastoVariable(gastoActual)">
                <div>
                    <Producto producto=gastoActual></Producto>
                </div>
            </div>
        }
    </div>
    @*Botón de agregar un gasto variable*@
    <div class="boton-container">
        <div class="transition gasto-boton"     
            @onmouseover="() => Hover(1)" 
            @onmouseout="() => HoverOut(1)"
            @onclick="AgregarNuevoGasto">
            <a>
                @if (hoverAgregar == false)
                {
                    <img src="img/estructuraOrg/addPuesto.png" alt="">
                }
                @hoverTextAgregar
            </a>
        </div>
    </div>
</div>
@*Fin de seccion de gastos variables*@


@*Comienzo de popup donde se crean/editan los gastos variables*@
@if (PopupVisible)
{
    @*Se agrega Overlay sobre la pantalla, para que el Popup sobresalga*@
    <div id="overlay" @onclick="CambiarVisibilidadPopup"></div>
    <div id="contenedor-popup">
        @*Seccion de ingreso de datos referentes al gasto variable*@
        <div id="contenedor-crear-gasto">
            @*
            Se revisa si hay gasto variable seleccionado o no
            En caso de haber uno seleccionado, se está editando un gasto
            Caso contrario se está agregando uno nuevo
            *@
            <div class="popup-top">
                @if (hayGastoSeleccionado == false)
                {
                    <h1>Nuevo producto</h1>
                }
                else
                {
                    <h1>Editar producto</h1>
                }
                <div class="salir-popup">
                    <img src="img/estructuraOrg/x.png" alt="" width="15px" height="15px" @onclick="CambiarVisibilidadPopupBoton">
                </div>
            </div>

            @*Form para ingresar los datos referentes al gasto fijo*@
            <div class="contenedor-datos-gasto">
                <div class="entrada-datos">
                    @*Form para agregar el nombre del gasto variable*@
                    <label for="nombre-producto">Nombre del producto:</label>
                    <input id="nombre-producto" type="text" @bind="productoActivo.Nombre" placeholder="@placeHolderNombre" maxlength="30">    
                </div>
                <div class="entrada-datos">
                    @*Form para agregar el nombre del gasto variable*@
                    <label for="lote-producto">Lote del producto:</label>
                    <input id="lote-producto" type="number" min="1" @bind="productoActivo.Lote">
                </div>      
            </div>
            @((MarkupString)ErrorNombre) @*Mensaje de error*@
            @((MarkupString)ErrorLote) @*Mensaje de error*@
            @((MarkupString)ErrorComponentesNuevos) @*Mensaje de error*@

            @*Seccion de los botones para eliminar o guardar el gasto variable*@
        </div>

        @*Seccion de ingreso y edicion de componentes*@
        <div id="contenedor-componentes">
            <h1 id="titulo-componentes">Componentes</h1>
            @*Tabla donde se contienen los componentes*@
            <div style="width:100%; height:165px; overflow:auto;">
                <table id=lista_componentes>
                    @*En caso de que hayan componente que mostrar, se muestra la tabla*@
                    @if (productoActivo.Componentes.Count() > 0)
                    {
                        <tr>
                            <th style="border:none;">Nombre</th>
                            <th style="border:none;">Unidad</th>
                            <th style="border:none;">Cantidad</th>
                            <th style="border:none;">Costo</th>
                            <th style="border:none;" width="40px"></th>
                        </tr>
                    }
                    @*En caso de no haber componentes, se le indica al usuario mediante una frase*@
                    else
                    {
                        <tr>
                            <th style="border:none; text-align:center; opacity:0.5;"> No hay componentes que mostrar</th>
                        </tr>
                    }
                    @*Se muestran en una tabla, el nombre, el tipo de unidades, el valor y el costo de los componentes del costo variable seleccionado*@
                    @for (int i = 0; i < productoActivo.Componentes.Count(); i += 1)
                    {
                        int index = i;

                        <tr class="filas-tabla-componente">
                            <td> @productoActivo.Componentes[index].Nombre</td>
                            <td> @productoActivo.Componentes[index].Unidad</td>
                            <td> @(String.Format(CultureInfo.InvariantCulture, "{0:#,##0.00}", (@productoActivo.Componentes[index].Cantidad)))</td>
                            <td> @(String.Format(CultureInfo.InvariantCulture, "{0:#,##0.00}", (@productoActivo.Componentes[index].Costo)))</td>
                            @*Botón para borrar un beenficio*@
                            <td class="columna-borrar-componente"><div class="borrar-componente" @onclick="()=>BorrarComponente(productoActivo.Componentes[index])"><img src="img/puesto/trashCan.png" width="35px" height="35px"></div></td>
                        </tr>
                    }
                </table>
            </div>
            @*Form para ingresar los datos de un nuevo componente*@
            @if (formVisible)
            {
                @*Se agrega a los comodines un nuevo beneficio*@
                componentes.Add(new ComponenteModel());
                <div class="form-componentes">
                    <h2 class="titulo-componente">Nuevo Componente</h2>
                    @*Sección de forms para ingresar los datos de un nuevo componente*@
                    <div id="tabla-form">
                        @*Sección donde se encuentra el form donde se ingresa el nombre del nuevo componente*@
                        <div id="container-input-nombre-componente">
                            <label for="nombreComponente">Nombre:</label>
                            <input class="input-componente" id="nombreComponente" name="nombreComponente" @bind="componentes[componenteActual].Nombre" maxlength="30">
                        </div>
                        @*Sección donde se encuentra el form donde se ingresa la unidad del nuevo componente*@
                        <div id="container-input-unidad-componente">
                            <label for="unidadComponente">Unidad:</label>
                            <input class="input-componente" id="unidadComponente" name="unidadComponente" @bind="componentes[componenteActual].Unidad" maxlength="30">
                        </div>
                        @*Sección donde se encuentra el form donde se ingresa la cantidad del nuevo componente*@
                        <div id="container-input-cantidad-componente">
                            <label for="cantidadComponente">Cantidad:</label>
                            <input class="input-componente" id="cantidadComponente" min="1" name="cantidadComponente" type="number" @bind="componentes[componenteActual].Cantidad" step="any">
                        </div>
                        @*Sección donde se encuentra el form donde se ingresa la costo del nuevo componente*@
                        <div id="container-input-costo-componente">
                            <label for="costoComponente">Costo:</label>
                            <input class="input-componente" id="costoComponente" min="1" name="costoComponente" type="number" @bind="componentes[componenteActual].Costo" step="any">
                        </div>
                        @*Sección donde se encuentra el botón para guardar el beneficio con los datos ingresados*@
                        <div id="seccion-guardar-componente">
                            <div id="boton-guardar-componente" @onclick="AgregarComponenteNuevo">
                                <p class="aceptar">Aceptar</p>
                            </div>
                        </div>
                    </div>
                </div>
                @*Sección de mensajes de error en caso de que se hayan ingresado datos erróneos en los forms del nuevo beneficio*@
                @if (NombreVacio)
                {
                    <p style="color:red; align-self:center; margin-bottom:10px;">ERROR: El nombre ingresado es vacío</p>
                }
                @if (UnidadVacia)
                {
                    <p style="color:red; align-self:center; margin-bottom:10px;">ERROR: La unidad ingresada es vacía</p>
                }
                @if (CantidadPositiva == false)
                {
                    <p style="color:red;  align-self:center; margin-bottom:10px;">ERROR: La cantidad ingresada debe ser positiva</p>
                }
                @if (CostoPositivo == false)
                {
                    <p style="color:red;  align-self:center; margin-bottom:10px;">ERROR: El costo debe de ser positivo</p>
                }
                @if (NombreRepetido)
                {
                    <p style="color:red;  align-self:center; margin-bottom:10px;">ERROR: El nombre ingresado ya existe</p>
                }
                @if (DecimalValido == false) 
                {
                    <p style="color:red;  align-self:center; margin-bottom:10px;">ERROR: El numero ingresado es demasiado grande</p>
                }
                @if (CaracteresInvalidos == true) 
                {
                    <p style="color:red;  align-self:center; margin-bottom:10px;">ERROR: El nombre del componente debe ser alfanumerico</p>
                }
            }
            @*Sección de botones en la parte inferior del popup de los componente*@
            <div id="botones-componentes">
                @*En caso de que el form no sea visible, se muestra un botón de "+" que al presionarlo se muestran los formas para ingresar el nuevo beneficio*@
                @if (!formVisible)
                {
                    <div id="boton-agregar-componente">
                        <img src="img/estructuraOrg/addPuesto.png" alt="" width="20px" height="20px" @onclick="CambiarVisibilidadForm">
                    </div>
                }
                @*En casode que el form sea visible, se muestra un botón de "^" que al presionarlo, oculta la sección de los forms de los componente*@
                else
                {
                    <div id="boton-cerrar-form-componente">
                        <img src="img/estructuraOrg/up-arrow.png" alt="" width="20px" height="20px" @onclick="CambiarVisibilidadForm">
                    </div>
                }
            </div>
            @*Botón de X en la parte superior derecha del popup que al presionarlo se cierra el popup*@
            @*
            *@
        </div>
        <div id="inferior-horizontal">
            @if (hayGastoSeleccionado == true)
            {
                /*Mostramos el boton de elimnar solo si se selccionó un gasto*/
                <div id="eliminar-gasto" class="gasto-boton-componente" @onmouseover="() => Hover(3)" @onmouseout="() => HoverOut(3)" @onclick="() => EliminarGasto(productoActivo)">
                    <a>
                        @if (hoverEliminar == false)
                        {
                            <img src="img/generic/trashCan.png" alt="">
                        }
                        @hoverTextEliminar
                    </a>
                </div>
            }
            <div id="guardar-boton" class="gasto-boton-componente" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosGasto(productoActivo)">
                <a>
                    @if (hoverGuardar == false)
                    {
                        <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                    }
                    @hoverTextGuardar
                </a>
            </div>
        </div>
    </div>
}
@*Fin de popup de los gastos variables *@
@code {
    // lista de gastos variables de la base de datos
    [Parameter]
    public List<ProductoModel> productos { get; set; }

    // fecha del análisis al que pertenecen los gastos variables 
    [Parameter]
    public DateTime fechaAnalisis { get; set; }

    // booleano que indica si se está editanto un producto o agregando
    public bool hayGastoSeleccionado = false;

    // producto seleccionado actualmente, puede ser nuevo o un existente
    public ProductoModel productoActivo = new ProductoModel();

    // bool que indica si se debe mostrar el popup de componente
    public bool PopupVisible { get; set; } = false;

    // handler con el cual comunicarse con la base de datos
    public ProductoHandler HandlerGasto = new ProductoHandler();

    // handler con el cual comunicarse con los componentes en la base de datos
    public ComponenteHandler HandlerComponente = new ComponenteHandler();


    // string que almacena el nombre de un producto antes de ser modificado para pdoer actualizarlo en la base de datos
    public string copiaNombreOriginal = "";

    // placeholder indican que se debe ingresar en los campos
    public string placeHolderNombre = "Ingresar nombre";

    // variables para agregar y quitar texto al hacer hover en botones de guardar, agregar y eliminar
    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";
    public string hoverTextEliminar = "";

    // booleanos para el control de los hover en botones guardar y agregar
    public bool hoverGuardar = false;
    public bool hoverAgregar = false;
    public bool hoverEliminar = false;

    // strings que muestran los mensajes de error con respecto al nombre y los números negativos
    public string ErrorNombre = "";
    public string ErrorLote = "";
    public string ErrorComponentesNuevos = "";

    public bool nuevosComponentes = false; 

    // método para controlar el hover de los botones guardar y agregar
    public void Hover(int action)
    {
        // este metodo quita la imagen y agrega el texto correspondiente
        // recibe un int para diferenciar si es el hover del botón de guardar (1) o de agregar (2)
        if (action == 1)
        {
            hoverTextAgregar = "Agregar producto";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        }
        else if (action == 3)
        {
            hoverEliminar = true;
            hoverTextEliminar = "Eliminar producto";
        }
    }

    // método para controlar el cuando se quita el hover de los botones guardar y agregar
    public void HoverOut(int action)
    {
        // este metodo agrega la imagen y quita el texto correspondiente
        // recibe un int para diferenciar si es el quitar hover del botón de guardar (1) o de agregar (2)
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        }
        else if (action == 2)
        {
            hoverGuardar = false;
            hoverTextGuardar = "";
        }
        else if (action == 3)
        {
            hoverEliminar = false;
            hoverTextEliminar = "";
        }
    }

    // método para activar y descativar el popup de los componente
    public void CambiarVisibilidadPopup()
    {
        if (PopupVisible)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            PopupVisible = false;     
        }
        else
        {
            PopupVisible = true;
        }
    }

    // metodo que desactiva la visibilidad del popup con el boton
    public void CambiarVisibilidadPopupBoton()
    {
        nuevosComponentes = componentesNuevos.Count() > 0;
        if (PopupVisible && nuevosComponentes)
        {
            ErrorComponentesNuevos = "<p class=\"mensaje-error\">Error: hay componentes nuevos, presione el botón de guardar datos antes de salir.</p>";
        }
        else if (PopupVisible) {
            ErrorComponentesNuevos = "";
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            PopupVisible = false;
        }
        else
        {
            PopupVisible = true;
        }
    }

    // método para asignar el producto activo según el que se clickeó
    // recibe el producto al que se le hizo click
    public void SeleccionarGastoVariable(ProductoModel gastoSeleccionado)
    {
        // se asigna el puesto activo
        productoActivo = gastoSeleccionado;

        // se asugnan variables de vista
        placeHolderNombre = productoActivo.Nombre;

        // se copia el nombre por si se va a actualizar este nombre
        copiaNombreOriginal = productoActivo.Nombre;

        PopupVisible = true;

        // se indica que hay un producto seleccionado
        hayGastoSeleccionado = true;

        // se resetean variables e error
        ErrorNombre = "";
        ErrorLote = "";
        ErrorComponentesNuevos = "";
    }

    // método llamado por el botón de agregar
    // este reseta la vista de la izquierda para poder ingresar los datos del nuevo producto
    public void AgregarNuevoGasto()
    {
        // se reseatean variables de control visual
        placeHolderNombre = "Ingresar nombre";

        // se indica que no hay un producto seleccionado
        hayGastoSeleccionado = false;

        PopupVisible = true;

        // no hay un nombre por copiar porque es un producto nuevo
        copiaNombreOriginal = "";

        // se crea un nuevo producto
        productoActivo = new ProductoModel();

        // se resetean variables de errores
        ErrorNombre = "";
        ErrorLote = "";
        ErrorComponentesNuevos = "";
    }

    // método que permitir guardar en la base de datos un gasto variable
    // recibe el gasto variable a guardar
    public void GuardarDatosGasto(ProductoModel gastoGuardar)
    {

        // se revisa que el nombre no este repetido y que no haya números negativo
        if (RevisarNombre(gastoGuardar) && RevisarLote(gastoGuardar))
        {

            // se asigna la fecha del análisis por si es un gasto variable nuevo
            gastoGuardar.FechaAnalisis = fechaAnalisis;
            // se ingresa con el handler en la base de datos el gasto variable
            HandlerGasto.InsertarProducto(copiaNombreOriginal, gastoGuardar);

            // Se eliminan los componentes de la base de datos
            EliminarComponenteBD();

            // Se ingresan los componentes del producto que se va a guardar
            foreach (ComponenteModel componente in componentesNuevos)
            {
                componente.NombreProducto = productoActivo.Nombre;
                HandlerComponente.AgregarComponente(componente);
            }


            // se resetean variables de vista y de control
            if (hayGastoSeleccionado == false)
            {
                productoActivo = new ProductoModel();
            }
            ErrorNombre = "";
            ErrorLote = "";
            ErrorComponentesNuevos = "";

            // se recarga la página para que se vean los cambios
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    // método para revisar si el nombre está repetido y que no esté vacío
    private bool RevisarNombre(ProductoModel gastoGuardar)
    {
        bool valido = true;
        // se revisa que no esté vacío
        if (string.IsNullOrWhiteSpace(gastoGuardar.Nombre))
        {
            ErrorNombre = "<p class=\"mensaje-error\">Error: ingrese un nombre para el producto.</p>";
            valido = false;
        }
        else if (hayGastoSeleccionado == false)
        {
            // si es un producto nuevo solo revisamos que no esté en la lista
            if (productos.Exists(x => x.Nombre.ToLower() == gastoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"mensaje-error\"> Error: el nombre del producto ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
        }
        else
        {
            int index = productos.IndexOf(gastoGuardar);
            // si se seleccionó un producto, debemos sacarlo de la lista y luego revisar si está repetido
            productos.Remove(gastoGuardar);
            if (productos.Exists(x => x.Nombre.ToLower() == gastoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"mensaje-error\"> Error: el nombre del producto ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
            // resinertamos el peusto en la misma posición donde estaba
            productos.Insert(index, gastoGuardar);
        }
        if (!FormatManager.EsAlfanumerico(gastoGuardar.Nombre)) { 
            ErrorNombre = "<p class=\"mensaje-error\"> Error: el nombre del producto debe ser alfanumerico. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
            valido = false;
        }

        // hacemos reseteo en variable de error del nombre
        if (valido)
        {
            ErrorNombre = "";
        }
        return valido;
    }

    // método que revisa si el número de plazas es válido
    // recibe el producto que se está editando
    private bool RevisarLote(ProductoModel gastoGuardar)
    {
        bool valido = true;
        // se revisa que no sea negativo
        if (gastoGuardar.Lote < 1)
        {
            ErrorLote = "<p class=\"mensaje-error\"> Error: Ingrese un número de lote mayor a 0.</p>";
            valido = false;
        }
        else
        {
            ErrorLote = "";
        }
        return valido;
    }

    // método para eliminar un producto de la base de datos
    // recibe el producto que se desea eliminar
    public void EliminarGasto(ProductoModel gastoEliminar)
    {
        // se utiliza el handler para eliminar el producto
        HandlerGasto.EliminarProducto(gastoEliminar);

        // se recarga la página para que se vean los cambios
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }


    // Componentes utilizados dan la seccion de componentes
    // Cada uno de ellos está "bindeado" al form que lo creó.
    // Se agregan a la lista de componentes del gastoActivo.
    public List<ComponenteModel> componentes = new List<ComponenteModel>();

    public List<ComponenteModel> componentesNuevos = new List<ComponenteModel>();

    public List<ComponenteModel> componentesEliminados = new List<ComponenteModel>();

    // El índice del comodín sobre el cual se está operando en determinado momento
    int componenteActual = 0;

    // Variable que indica si el form para ingresar un nuevo beneficio es nuevo o no
    public bool formVisible = false;

    // Variables booleanas que verifican la correctitud de los inputs de los componentes
    public bool NombreVacio { get; set; } = false;

    public bool UnidadVacia { get; set; } = false;

    public bool CantidadPositiva { get; set; } = true;

    public bool CostoPositivo { get; set;  } = true;

    public bool NombreRepetido { get; set; } = false;

    public bool EsNuevo { get; set; } = false;

    public bool DecimalValido = true;

    public bool CaracteresInvalidos = false;

    // Variable que indica si el componente que se esta tratando de agregar ya existe en la base de datos.
    public bool YaExisteComponente { get; set; }

    // Método que agrega un componente ingresado por medio de forms, a la base de datos.
    public void AgregarComponenteNuevo()
    {

        bool hayNombre = !(string.IsNullOrWhiteSpace(componentes[componenteActual].Nombre));
        bool hayUnidad = !(string.IsNullOrWhiteSpace(componentes[componenteActual].Unidad));
        bool cantidadPositiva = componentes[componenteActual].Cantidad >= 0;
        bool costoPositivo = componentes[componenteActual].Costo >= 0;
        bool nombreRepetido = false;
        bool decimalValido = FormatManager.ValidarInputDecimal(componentes[componenteActual].Cantidad) && FormatManager.ValidarInputDecimal(componentes[componenteActual].Costo);

        // Verifica que haya nombre para revisar si esta repetido
        if (hayNombre) 
        {
            nombreRepetido = RevisarNombreRepetido(componentes[componenteActual]);
        }

        NombreVacio = !(hayNombre);
        UnidadVacia = !(hayUnidad);
        CantidadPositiva = cantidadPositiva;
        CostoPositivo = costoPositivo;
        NombreRepetido = nombreRepetido;
        DecimalValido = decimalValido;
        CaracteresInvalidos = false;

        // En caso de que todos los datos ingresados en el form del beneficio nuevo sean válidos
        if (hayNombre && hayUnidad && cantidadPositiva && costoPositivo && (nombreRepetido == false) && decimalValido && FormatManager.EsAlfanumerico(componentes[componenteActual].Nombre))
        {
            componentes[componenteActual].FechaAnalisis = fechaAnalisis;
            componentes[componenteActual].NombreProducto = productoActivo.Nombre;
            formVisible = false;
            componentesNuevos.Add(componentes[componenteActual]);
            productoActivo.Componentes.Add(componentes[componenteActual]);

            componentes.Add(new ComponenteModel());
            componenteActual += 1; 
        }
        // En caso de que los datos ingresados en el form de los componente sean incorrectos, se verifica uno por uno para indicarlo en las variables correspondientes.
        else
        {
            if (componentes[componenteActual].Cantidad < 0)
            {
                CantidadPositiva = false;
            }
            if (string.IsNullOrWhiteSpace(componentes[componenteActual].Nombre))
            {
                NombreVacio = true;
            }
            if (string.IsNullOrWhiteSpace(componentes[componenteActual].Unidad)) 
            {
                UnidadVacia = true;
            }
            if (componentes[componenteActual].Costo < 0)
            {
                CostoPositivo = false;
            }
            if (nombreRepetido) {
                NombreRepetido = true;
            }
            if (decimalValido == false) {
                DecimalValido = false; 
            }
            if (!FormatManager.EsAlfanumerico(componentes[componenteActual].Nombre))
            {
                CaracteresInvalidos = true;
            }
        }
    }

    // Revisa si el nombre ingresado para el componente esta repetido (ya existe en la base)
    public bool RevisarNombreRepetido(ComponenteModel componente) {

        bool esRepetido = false; 

        if (productoActivo.Componentes.Exists(x => x.Nombre.ToLower() == componente.Nombre.ToLower()))
        {
            esRepetido = true;
        }

        return esRepetido; 
    }

    // Método que borra un componente de la lista de componentes.
    public void BorrarComponente(ComponenteModel componente)
    {
        componente.FechaAnalisis = productoActivo.FechaAnalisis;
        componente.NombreProducto = productoActivo.Nombre;
        componentesEliminados.Add(componente);
        productoActivo.Componentes.Remove(componente);
    }

    // Método que borra un componente de la base de datos.
    public void EliminarComponenteBD()
    {
        ComponenteHandler handler = new ComponenteHandler();
        foreach (ComponenteModel componente in componentesEliminados) {
            if (componentesNuevos.Contains(componente) == false) {  
                handler.BorrarComponente(componente);
            }
            else {
                componentesNuevos.Remove(componente);
            }
        }
    }

    // Método que cambia el valor de la variable que indica la visibilidad del form de ingresar un nuevo beneficio.
    public void CambiarVisibilidadForm()
    {
        if (formVisible)
        {
            formVisible = false;
        }
        else
        {
            formVisible = true;
        }
    }

    // Método que refresca la página actual.
    public void RefrescarPagina()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }



}
