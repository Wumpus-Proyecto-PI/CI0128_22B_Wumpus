@using PI.Models
@using PI.Handlers
@using PI.Services
@inject NavigationManager NavigationManager;

<div style="display: flex; width: 100%; align-items: center; justify-content: center; margin-bottom: 30px">
    <div id="form-parametros-rentabilidad">
        <div class="pill-form">
            <div><h4>Seguro social</h4></div>
            <input id="form-ganancia-mensual" type="number" min=0 style="font-size: larger" step="any" class="form-control" @bind="Config.PorcentajeSS" @onfocusout="ActualizarConfigAnalisis" />
        </div>
        <div class="pill-form">
            <div><h4>Prestaciones</h4></div>
            <input id="form-ganancia-mensual" type="number" min=0 style="font-size: larger" step="any" class="form-control" @bind="Config.PorcentajePL" @onfocusout="ActualizarConfigAnalisis" />
        </div>
    </div>
</div>
<div id="contenido-puestos-pestañas">   
    @*se llama al componente reazor dinamico que contiene lado del cliente de agregar Puestos y beneficios*@
    <div style="width: 100%; display: flex;">
<div class="altura-seccion" id="seccion-pestañas">
    @*Comienzo ventana izquierda de edición e ingreso de Puestos*@
        <div id="titulo-contenido">

            @*
                Se revisa si hay puesto seleccionado o no
                En caso de haber uno seleccionado, se está editando un puesto
                Caso contrario se está agregando uno nuevo
            *@
            @if (HayPuestoSeleccionado == false)
            {
                    <h2 class="mt-3 fw-bold">Nuevo puesto</h2>
                } else {
                    <h2 class="mt-3 fw-bold">Editar puesto</h2>
                }


                @*
                Comienzo sección de ingreso de datos de un puesto
                Ya se edición o creación de puesto
            *@
                <div id="cuadro_configuracion">

                    <form id="form_configuracion">
                        @*Input del nombre del puesto*@
                        <div class="fila-form-configuracion">
                            <label>Nombre del puesto</label> <input name="" id="nombre_puesto" type="text" @bind="PuestoActivo.Nombre" placeholder="@PlaceHolderNombre" maxlength="30">
                        </div>

                        @(
                            (MarkupString)ErrorNombre
                           ) @*Mensaje de error*@

                        @*Input del salario del puesto*@
                        <div class="fila-form-configuracion">
                            <label>Salario Mensual</label> <input name="" id="salario_mensual" min="0" type="number" step="any" @bind="PuestoActivo.SalarioBruto">
                        </div>
                        @(
                            (MarkupString)ErrorSalario
                            ) @*Mensaje de error*@

                        @*Input de las plazas del puesto*@
                        <div class="fila-form-configuracion">
                            <label>Plazas</label> <input name="" id="num-plazas" min="1" type="number" @bind="PuestoActivo.Plazas">
                        </div>
                        @(
                            (MarkupString)ErrorPlaza
                            ) @*Mensaje de error*@

                        @*Input del monto de beneficios del puesto*@
                        <div class="fila-form-configuracion">
                            <label>Beneficios</label> <input name="" id="beneficios" min="1" type="number" @bind="PuestoActivo.Beneficios">
                        </div>
                    </form>
                </div>
                @*
                Comienzo sección de ingreso de datos de un puesto
            *@


                @*Botón de guardado*@
            </div>
            <div id="inferior-horizontal">
                @if (HayPuestoSeleccionado == true) {
                    /*Mostramos el boton de elimnar solo si se selccionó un puesto*/
                    <div id="eliminar-puesto"class="est-org-boton " @onmouseover="() => Hover(3)" @onmouseout="() => HoverOut(3)" @onclick="() => EliminarPuesto(PuestoActivo)">
                        <a>
                            @if (HoverEliminar == false)
                            {
                                <img src="img/generic/trashCan.png" alt="">
                            }
                            @HoverTextEliminar
                        </a>
                    </div>
                }
                <div  class="est-org-boton" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosPuesto(PuestoActivo)">
                    <a>
                        @if (HoverGuardar == false) {
                            <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                        }
                        @HoverTextGuardar
                    </a>
                </div>
            </div>
            @*Fin ventana izquierda de edición e ingreso de Puestos*@
        </div>

        @*Comienzo de seccion de Puestos donde se ven los Puestos en cajas con organigrama*@
        <div class="altura-seccion" id="seccion-puestos">
            <div id="mostrar-puestos">

                @*Renderización de las tarjetas de los Puestos, son componentes razor aparte*@
                @foreach (PuestoModel puestoActual in Puestos)
                {
                    <div class="puesto-clickeable" @onclick="() => SeleccionarPuesto(puestoActual)" >
                        <div >
                            <PuestoParcialView puesto=puestoActual></PuestoParcialView>
                        </div>
                        <div class ="puesto-icono-editar">
                            <img src=img/generic/editPhoto.png>
                        </div>
                    </div>
                }
            </div>

            @*Botón de agregar un puesto*@
            <div class="transition est-org-boton" @onmouseover="() => Hover(1)" @onmouseout="() => HoverOut(1)" @onclick="AgregarNuevoPuesto">
                <a>
                    @if (HoverAgregar == false)
                    {
                        <img src="img/estructuraOrg/addPuesto.png" alt="">
                    }
                    @HoverTextAgregar
                </a>
            </div>
        </div>
    </div>
</div>
@*Fin de seccion de Puestos donde se ven los Puestos en cajas con organigrama*@





@code {
    // lista de Puestos de la base de datos
    [Parameter]
    public List<PuestoModel> Puestos { get; set; }

    // fecha del análisis al que pertenece la estructura organanizativa
    [Parameter]
    public DateTime FechaAnalisis { get; set; }

    // Modelo que representa a la configuración del análisis de la fecha que se pasó por parámetro
    [Parameter]
    public ConfigAnalisisModel Config { get; set; }

    // booleano que indica si se está editanto un puesto o agregando
    public bool HayPuestoSeleccionado = false;

    // puesto seleccionado actualmente, puede ser nuevo o un existente
    public PuestoModel PuestoActivo = new PuestoModel();

    // bool que indica si se debe mostrar el popup de beneficios
    public bool PopupVisible { get; set; } = false;

    // handler con el cual comunicarse con la base de datos
    public EstructuraOrgHandler HandlerPuesto = new EstructuraOrgHandler();

    // hanlder para manejar los porcenatjes de seguro social y de prestaciones laborales en la base
    public AnalisisHandler AnalisisHandler = new AnalisisHandler();

    // string que almacena el nombre de un puesto antes de ser modificado para poder actualizarlo en la base de datos
    public string CopiaNombreOriginal = "";

    // placeholder indican que se debe ingresar en los campos
    public string PlaceHolderNombre = "Ingresar nombre";

    // variables para agregar y quitar texto al hacer hover en botones de guardar, agregar y eliminar
    public string HoverTextAgregar = "";
    public string HoverTextGuardar = "";
    public string HoverTextEliminar = "";

    // booleanos para el control de los hover en botones guardar y agregar
    public bool HoverGuardar = false;
    public bool HoverAgregar = false;
    public bool HoverEliminar = false;

    // strings que muestran los mensajes de error con respecto al nombre y los números negativos
    public string ErrorNombre = "";
    public string ErrorSalario = "";
    public string ErrorPlaza = "";

    // método para controlar el hover de los botones guardar y agregar
    public void Hover(int action)
    {
        // este metodo quita la imagen y agrega el texto correspondiente
        // recibe un int para diferenciar si es el hover del botón de guardar (1) o de agregar (2)
        switch (action)
        {
            case 1:
                HoverTextAgregar = "Agregar Puesto";
                HoverAgregar = true;
                break;

            case 2:
                HoverGuardar = true;
                HoverTextGuardar = "Guardar datos";
                break;

            case 3:
                HoverEliminar = true;
                HoverTextEliminar = "Eliminar puesto";
                break;
        }
    }

    // método para controlar el cuando se quita el hover de los botones guardar y agregar
    public void HoverOut(int action)
    {
        // este metodo agrega la imagen y quita el texto correspondiente
        // recibe un int para diferenciar si es el quitar hover del botón de guardar (1) o de agregar (2)
        switch (action)
        {
            case 1:
                HoverTextAgregar = "";
                HoverAgregar = false;
                break;

            case 2:
                HoverGuardar = false;
                HoverTextGuardar = "";
                break;

            case 3:
                HoverEliminar = false;
                HoverTextEliminar = "";
                break;
        }
    }



    // método para asignar el puesto activo según el que se clickeó
    // recibe el puesto al que se le hizo click
    public void SeleccionarPuesto(PuestoModel puestoSeleccionado)
    {
        // se asigna el puesto activo
        PuestoActivo = puestoSeleccionado;

        // se asugnan variables de vista
        PlaceHolderNombre = PuestoActivo.Nombre;

        // se copia el nombre por si se va a actualizar este nombre
        CopiaNombreOriginal = PuestoActivo.Nombre;

        // se indica que hay un puesto seleccionado
        HayPuestoSeleccionado = true;

        // se resetean variables e error
        ErrorNombre = "";
        ErrorSalario = "";
        ErrorPlaza = "";
    }

    // método llamado por el botón de agregar
    // este reseta la vista de la izquierda para poder ingresar los datos del nuevo puesto
    public void AgregarNuevoPuesto() {
        // se reseatean variables de control visual
        PlaceHolderNombre = "Ingresar nombre";

        // se indica que no hay un puesto seleccionado
        HayPuestoSeleccionado = false;

        // no hay un nombre por copiar porque es un puesto nuevo
        CopiaNombreOriginal = "";

        // se crea un nuevo puesto
        PuestoActivo = new PuestoModel();

        // se resetean variables de errores
        ErrorNombre = "";
        ErrorSalario = "";
        ErrorPlaza = "";
    }


    // método que permitir guardar en la base de datos un puesto
    // recibe el puesto a guadar
    public void GuardarDatosPuesto(PuestoModel puestoGuardar) {

        // se revisa que el nombre no este repetido y que no haya números negativo
        if (RevisarNombre(puestoGuardar) && RevisarSalario(puestoGuardar) && RevisarPlazasPuesto(puestoGuardar))
        {
            // se asigna el pueso la fecha del análisis por si es un puesto nuevo
            puestoGuardar.FechaAnalisis = FechaAnalisis;
            // se ingresa con el handler en la base de datos el puesto
            HandlerPuesto.InsertarPuesto(CopiaNombreOriginal, puestoGuardar);

            // se resetean variables de vista y de control
            if (HayPuestoSeleccionado == false)
            {
                PuestoActivo = new PuestoModel();
            }
            ErrorNombre = "";
            ErrorSalario = "";
            ErrorPlaza = "";

            // se recarga la página para que se vean los cambios
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); 
        }
    }

    // método para revisar si el nombre está repetido y que no esté vacío
    private bool RevisarNombre(PuestoModel puestoGuardar)
    {
        bool valido = true;
        // se revisa que no esté vacío
        if (string.IsNullOrWhiteSpace(puestoGuardar.Nombre))
        {
            ErrorNombre = "<p class=\"puesto-error-nombrevacio\">Error: ingrese un nombre para el puesto.</p>";
            valido = false;
        }
        if (!HayPuestoSeleccionado) {
            // si es un puesto nuevo solo revisamos que no esté en la lista
            if (Puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del puesto ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
        } else {
            int index = Puestos.IndexOf(puestoGuardar);
            // si se seleccionó un puesto, debemos sacarlo de la lista y luego revisar si está repetido
            Puestos.Remove(puestoGuardar);
            if (Puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del puesto ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
            // resinertamos el peusto en la misma posición donde estaba
            Puestos.Insert(index, puestoGuardar);
        }
        if (!FormatManager.EsAlfanumerico(puestoGuardar.Nombre))
        {
            ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: El nombre del puesto debe ser alfanumérico. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
            valido = false;
        }

        // hacemos reseteo en variable de error del nombre
        if (valido)
        {
            ErrorNombre = "";
        }
        return valido;
    }

    // método que revisa si el número de plazas es válido
    // recibe el puesto que se está editando
    private bool RevisarPlazasPuesto(PuestoModel puestoGuardar)
    {
        bool valido = true;
        // se revisa que no sea negativo
        if (puestoGuardar.Plazas < 0.0m)
        {
            ErrorPlaza = "<p class=\"puesto-error-nombrevacio\"> Error: Ingrese un número de plazas positivo.</p>";
            valido = false;
        } else {
            ErrorPlaza = "";
        }
        return valido;
    }

    // método que revisa que el salario sea válido
    // recibe el puesto que se está editando
    private bool RevisarSalario(PuestoModel puestoGuardar)
    {
        // se revisa que no sea negatvo el salario del puesto
        bool valido = true;
        if (puestoGuardar.SalarioBruto < 0.0m)
        {
            ErrorSalario = "<p class=\"puesto-error-nombrevacio\"> Error: Ingrese un salario positivo.</p>";
            valido = false;
        } else {
            ErrorSalario = "";
        }
        return valido;
    }

    // método para eliminar un puesto de la base de datos
    // recibe el puesto que se desea eliminar
    public void EliminarPuesto(PuestoModel puestoEliminar)
    {
        // se utiliza el handler para eliminar el puesto
        HandlerPuesto.EliminarPuesto(puestoEliminar);

        // se recarga la página para que se vean los cambios
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    // Método que actualiza los valores de la configuración de un análisis
    public void ActualizarConfigAnalisis() {
        AnalisisHandler.ActualizarConfiguracionAnalisis(Config);
    }
}

