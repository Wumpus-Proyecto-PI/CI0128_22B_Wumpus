@using PI.Models
@using PI.Handlers
@inject NavigationManager NavigationManager;

<div class="altura-seccion" id="seccion-pestañas">
    @*Comienzo ventana izquierda de edición e ingreso de puestos*@
        <div id="titulo-contenido">

            @*
                Se revisa si hay puesto seleccionado o no
                En caso de haber uno seleccionado, se está editando un puesto
                Caso contrario se está agregando uno nuevo
            *@
            @if (hayPuestoSeleccionado == false)
            {
                <h2 class="mt-3 fw-bold">Nuevo puesto</h2>
            } else {
            <h2 class="mt-3 fw-bold">Editar puesto</h2>
            }


            @*
                Comienzo sección de ingreso de datos de un puesto
                Ya se edición o creación de puesto
            *@
            <div id="cuadro_configuracion">

                <form id="form_configuracion">
                    @*Input del nombre del puesto*@
                    <div class="fila-form-configuracion">
                    <label>Nombre del puesto</label> <input name="" type="text" @bind="puestoActivo.Nombre" placeholder="@placeHolderNombre">
                    </div>

                     @((MarkupString)ErrorNombre) @*Mensaje de error*@

                    @*Input del salario del puesto*@
                    <div class="fila-form-configuracion">
                    <label>Salario Mensual</label> <input name="" min="0" type="number" step="any" @bind="puestoActivo.SalarioBruto">
                    </div>
                    @((MarkupString)ErrorSalario) @*Mensaje de error*@

                    @*Input de las plazas del puesto*@
                    <div class="fila-form-configuracion">
                    <label>Plazas</label> <input name="" min="1" type="number" @bind="puestoActivo.Plazas">
                    </div>
                    @((MarkupString)ErrorPlaza) @*Mensaje de error*@
                    </form>

                    @*Se muestra edición de beneficios si se está editando un puesto*@
                    @if (hayPuestoSeleccionado) {
                        <button id="boton-beneficios"  @onclick="cambiarVisibilidadPopup"> Editar Beneficios</button>
                    }
                </div>
            @*
                Comienzo sección de ingreso de datos de un puesto
            *@


        @*Botón de guardado*@
        </div>
        <div id="inferior-horizontal">
            @if (hayPuestoSeleccionado == true) {
                /*Mostramos el boton de elimnar solo si se selccionó un puesto*/
                <div id="eliminar-puesto"class="est-org-boton " @onmouseover="() => Hover(3)" @onmouseout="() => HoverOut(3)" @onclick="() => eliminarPuesto(puestoActivo)">
                    <a>
                        @if (hoverEliminar == false)
                        {
                            <img src="img/generic/trashCan.png" alt="">
                        }
                        @hoverTextEliminar
                    </a>
                </div>
            }
            <div  class="est-org-boton " @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosPuesto(puestoActivo)">
                <a>
                    @if (hoverGuardar == false) {
                        <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                    }
                    @hoverTextGuardar
                </a>
            </div>
        </div>
    @*Fin ventana izquierda de edición e ingreso de puestos*@
</div>

@*Comienzo de seccion de puestos donde se ven los puestos en cajas con organigrama*@
    <div class="altura-seccion" id="seccion-puestos">
        <div id="mostrar-puestos">

            @*Renderización de las tarjetas de los puestos, son componentes razor aparte*@
            @foreach (PuestoModel puestoActual in puestos)
            {
                <div class="puesto-clickeable" @onclick="() => SeleccionarPuesto(puestoActual)" >
                        <div >
                            <PuestoParcialView puesto=puestoActual></PuestoParcialView>
                        </div>
                        <div class ="puesto-icono-editar">
                            <img src=img/generic/editPhoto.png>
                        </div>
                </div>
            }
        </div>

        @*Botón de agregar un puesto*@
        <div class="transition est-org-boton" @onmouseover="() => Hover(1)" @onmouseout="() => HoverOut(1)" @onclick="AgregarNuevoPuesto">
            <a>
                @if (hoverAgregar == false)
                {
                    <img src="img/estructuraOrg/addPuesto.png" alt="">
                }
                @hoverTextAgregar
                </a>
        </div>
    </div>
@*Fin de seccion de puestos donde se ven los puestos en cajas con organigrama*@





@code {
    // lista de puestos de la base de datos
    [Parameter]
    public List<PuestoModel> puestos { get; set; }

    // fecha del análisis al que pertenece la estructura organanizativa
    [Parameter]
    public DateTime fechaAnalasis { get; set; }

    // booleano que indica si se está editanto un puesto o agregando
    public bool hayPuestoSeleccionado = false;

    // puesto seleccionado actualmente, puede ser nuevo o un existente
    public PuestoModel puestoActivo = new PuestoModel();

    // bool que indica si se debe mostrar el popup de beneficios
    public bool PopupVisible { get; set; } = false;

    // handler con el cual comunicarse con la base de datos
    public EstructuraOrgHandler HandlerPuesto = new EstructuraOrgHandler();


    // string que almacena el nombre de un puesto antes de ser modificado para pdoer actualizarlo en la base de datos
    public string copiaNombreOriginal = "";

    // placeholder indican que se debe ingresar en los campos
    public string placeHolderNombre = "Ingresar nombre";

    // variables para agregar y quitar texto al hacer hover en botones de guardar, agregar y eliminar
    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";
    public string hoverTextEliminar = "";

    // booleanos para el control de los hover en botones guardar y agregar
    public bool hoverGuardar = false;
    public bool hoverAgregar = false;
    public bool hoverEliminar = false;

    // strings que muestran los mensajes de error con respecto al nombre y los números negativos
    public string ErrorNombre = "";
    public string ErrorSalario = "";
    public string ErrorPlaza = "";

    // método para controlar el hover de los botones guardar y agregar
    public void Hover(int action)
    {
        // este metodo quita la imagen y agrega el texto correspondiente
        // recibe un int para diferenciar si es el hover del botón de guardar (1) o de agregar (2)
        if (action == 1) {
            hoverTextAgregar = "Agregar Puesto";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        } else if (action == 3) {
            hoverEliminar = true;
            hoverTextEliminar = "Eliminar puesto";
        }
    }

    // método para controlar el cuando se quita el hover de los botones guardar y agregar
    public void HoverOut(int action)
    {
        // este metodo agrega la imagen y quita el texto correspondiente
        // recibe un int para diferenciar si es el quitar hover del botón de guardar (1) o de agregar (2)
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        } else if (action == 2) {
            hoverGuardar = false;
            hoverTextGuardar = "";
        } else if (action == 3)
        {
            hoverEliminar = false;
            hoverTextEliminar = "";
        }
    }



    // método para asignar el puesto activo según el que se clickeó
    // recibe el puesto al que se le hizo click
    public void SeleccionarPuesto(PuestoModel puestoSeleccionado)
    {
        // se asigna el puesto activo
        puestoActivo = puestoSeleccionado;

        // se asugnan variables de vista
        placeHolderNombre = puestoActivo.Nombre;
        
        // se copia el nombre por si se va a actualizar este nombre
        copiaNombreOriginal = puestoActivo.Nombre;
        
        // se indica que hay un puesto seleccionado
        hayPuestoSeleccionado = true;

        // se resetean variables e error
        ErrorNombre = "";
        ErrorSalario = "";
        ErrorPlaza = "";
    }

    // método llamado por el botón de agregar
    // este reseta la vista de la izquierda para poder ingresar los datos del nuevo puesto
    public void AgregarNuevoPuesto() {
        // se reseatean variables de control visual
        placeHolderNombre = "Ingresar nombre";

        // se indica que no hay un puesto seleccionado
        hayPuestoSeleccionado = false;

        // no hay un nombre por copiar porque es un puesto nuevo
        copiaNombreOriginal = "";

        // se crea un nuevo puesto
        puestoActivo = new PuestoModel();

        // se resetean variables de errores
        ErrorNombre = "";
        ErrorSalario = "";
        ErrorPlaza = "";
    }


    // método que permitir guardar en la base de datos un puesto
    // recibe el puesto a guadar
    public void GuardarDatosPuesto(PuestoModel puestoGuardar) {

        // se revisa que el nombre no este repetido y que no haya números negativo
        if (revisarNombre(puestoGuardar) && revisarSalario(puestoGuardar) && revisarPlazasPuesto(puestoGuardar))
        {
            // se asigna el pueso la fecha del análisis por si es un puesto nuevo
            puestoGuardar.FechaAnalisis = fechaAnalasis;
            // se ingresa con el handler en la base de datos el puesto
            HandlerPuesto.InsertarPuesto(copiaNombreOriginal, puestoGuardar);
            
            // se resetean variables de vista y de control
            if (hayPuestoSeleccionado == false)
            {
                puestoActivo = new PuestoModel();
            }
            ErrorNombre = "";
            ErrorSalario = "";
            ErrorPlaza = "";

            // se recarga la página para que se vean los cambios
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); 
        }
    }

    // método para revisar si el nombre está repetido y que no esté vacío
    private bool revisarNombre(PuestoModel puestoGuardar)
    {
        bool valido = true;
        // se revisa que no esté vacío
        if (string.IsNullOrWhiteSpace(puestoGuardar.Nombre))
        {
            ErrorNombre = "<p class=\"puesto-error-nombrevacio\">Error: ingrese un nombre para el puesto.</p>";
            valido = false;
        }

        if (!hayPuestoSeleccionado) {
            // si es un puesto nuevo solo revisamos que no esté en la lista
            if (puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del puesto ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
        } else {
            int index = puestos.IndexOf(puestoGuardar);
            // si se seleccionó un puesto, debemos sacarlo de la lista y luego revisar si está repetido
            puestos.Remove(puestoGuardar);
            if (puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del puesto ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
            // resinertamos el peusto en la misma posición donde estaba
            puestos.Insert(index, puestoGuardar);
        }

        // hacemos reseteo en variable de error del nombre
        if (valido)
        {
            ErrorNombre = "";
        }
        return valido;
    }

    // método que revisa si el número de plazas es válido
    // recibe el puesto que se está editando
    private bool revisarPlazasPuesto(PuestoModel puestoGuardar)
    {
        bool valido = true;
        // se revisa que no sea negativo
        if (puestoGuardar.Plazas < 0.0m)
        {
            ErrorPlaza = "<p class=\"puesto-error-nombrevacio\"> Error: Ingrese un número de plazas positivo.</p>";
            valido = false;
        } else {
            ErrorPlaza = "";
        }
        return valido;
    }

    // método que revisa que el salario sea válido
    // recibe el puesto que se está editando
    private bool revisarSalario(PuestoModel puestoGuardar)
    {
        // se revisa que no sea negatvo el salario del puesto
        bool valido = true;
        if (puestoGuardar.SalarioBruto < 0.0m)
        {
            ErrorSalario = "<p class=\"puesto-error-nombrevacio\"> Error: Ingrese un salario positivo.</p>";
            valido = false;
        } else {
            ErrorSalario = "";
        }
        return valido;
    }

    // método para eliminar un puesto de la base de datos
    // recibe el puesto que se desea eliminar
    public void eliminarPuesto(PuestoModel puestoEliminar)
    {
        // se utiliza el handler para eliminar el puesto
        HandlerPuesto.EliminarPuesto(puestoEliminar);

        // se recarga la página para que se vean los cambios
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

