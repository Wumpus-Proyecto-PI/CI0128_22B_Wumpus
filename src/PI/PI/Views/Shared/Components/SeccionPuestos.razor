@using PI.Models
@using PI.Handlers
@inject NavigationManager NavigationManager;

<div class="altura-seccion" id="seccion-pestañas">
    <div id="titulo-contenido">
        @*Aqui se agrega lo de las pestanas*@
        @if (hayPuestoSeleccionado == false)
        {
            <h1>Nuevo puesto</h1>
        } else {
            <h1>Editar puesto</h1>
        }

        <div id="cuadro_configuracion">

            <form id="form_configuracion">
                <div class="fila-form-configuracion">
                <label>Nombre</label> <input name="" type="text" @bind="puestoActivo.Nombre" placeholder="@placeHolderNombre">
                </div>

                 @((MarkupString)ErrorNombre)

                <div class="fila-form-configuracion">
                <label>Salario</label> <input name="" type="number" step="any" @bind="puestoActivo.SalarioBruto" placeholder="@placeHolderSalario">
                </div>

                <div class="fila-form-configuracion">
                <label>Plazas</label> <input name="" type="number" @bind="puestoActivo.Plazas" placeholder="@placeHolderPlazas">
                </div>
            </form>
        </div>
    </div>
    <div id="inferior-horizontal">
        <div id="guardar-puesto" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosPuesto(puestoActivo)">
            <a asp-controller="EstructuraOrg" asp-action="Index">
                @if (hoverGuardar == false) {
                    <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                }
                @hoverTextGuardar</a>
        </div>
    </div>
</div>

<div class="altura-seccion" id="seccion-puestos">
    @*Seccion de puestos donde se ven los puestos en cajas con organigrama*@
    <div id="mostrar-puestos">
        @foreach (PuestoModel puestoActual in puestos)
        {
            <div class="puesto-clickeable-eliminable" >
                <div @onclick="() => SeleccionarPuesto(puestoActual)">
                    <PuestoParcialView puesto=puestoActual></PuestoParcialView>
                </div>
                <img @onclick="() => eliminarPuesto(puestoActual)" class="puesto-icono-eliminar" src=img/generic/trashCan.png>
            </div>
        }
    </div>
    <div id="agregar-puesto" class="transition" @onmouseover="() => Hover(1)" @onmouseout="() => HoverOut(1)" @onclick="AgregarNuevoPuesto">
        <a>
            @if (hoverAgregar == false)
            {
                <img src="img/estructuraOrg/addPuesto.png" alt="">
            }
            @hoverTextAgregar
            </a>
    </div>
</div>


@code {
    [Parameter]
    public List<PuestoModel> puestos { get; set; }

    [Parameter]
    public DateTime fechaAnalasis { get; set; }

    public bool hayPuestoSeleccionado = false;
    public PuestoModel puestoActivo = new PuestoModel();

    public EstructuraOrgHandler HandlerPuesto = new EstructuraOrgHandler();

    public string copiaNombreOriginal = "";

    public string placeHolderNombre = "Ingresar nombre";
    public string placeHolderSalario = "Ingresar salario";
    public string placeHolderPlazas = "Ingresar plazas";

    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";

    public bool hoverGuardar = false;
    public bool hoverAgregar = false;

    public string ErrorNombre = "";

    public void Hover(int action)
    {

        if (action == 1) {
            hoverTextAgregar = "Agregar Puesto";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        }
    }
    public void HoverOut(int action)
    {
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        } else {
            hoverGuardar = false;
            hoverTextGuardar = "";
        }
    }

    public void SeleccionarPuesto(PuestoModel puestoSeleccionado)
    {
        puestoActivo = puestoSeleccionado;
        placeHolderNombre = puestoActivo.Nombre;
        placeHolderSalario = puestoActivo.SalarioBruto.ToString();
        placeHolderPlazas = puestoActivo.Plazas.ToString();
        copiaNombreOriginal = puestoActivo.Nombre;
        hayPuestoSeleccionado = true;
        ErrorNombre = "";
    }

    public void AgregarNuevoPuesto() {
        placeHolderNombre = "Ingresar nombre";
        placeHolderSalario = "Ingresar salario";
        placeHolderPlazas = "Ingresar plazas";
        hayPuestoSeleccionado = false;
        copiaNombreOriginal = "";
        puestoActivo = new PuestoModel();
        ErrorNombre = "";
    }

    public void GuardarDatosPuesto(PuestoModel puestoGuardar) {

        if (revisarNombre(puestoGuardar))
        {
            puestoGuardar.FechaAnalisis = fechaAnalasis;
            HandlerPuesto.InsertarPuesto(copiaNombreOriginal, puestoGuardar);
            if (hayPuestoSeleccionado == false)
            {
                puestoActivo = new PuestoModel();
            }
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); 
        }
    }

    private bool revisarNombre(PuestoModel puestoGuardar)
    {

        if (string.IsNullOrWhiteSpace(puestoGuardar.Nombre))
        {
            ErrorNombre = "<p class=\"puesto-error-nombrevacio\">Error: ingrese un nombre para el puesto.</p>";
            return false;
        }
        if (!hayPuestoSeleccionado) {
            if (puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del gasto fijo ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                return false;
            }
        } else {

        }


        return true;
    }

    public void eliminarPuesto(PuestoModel puestoEliminar)
    {
        HandlerPuesto.EliminarPuesto(puestoEliminar);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

