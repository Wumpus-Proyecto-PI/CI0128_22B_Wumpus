@using PI.Models
@using PI.Handlers
@inject NavigationManager NavigationManager;

<div class="altura-seccion" id="seccion-pestañas">
    <div id="titulo-contenido">
        @*Aqui se agrega lo de las pestanas*@
        @if (hayPuestoSeleccionado == false)
        {
            <h1>Nuevo puesto</h1>
        } else {
            <h1>Editar puesto</h1>
        }

        <div id="cuadro_configuracion">

            <form id="form_configuracion">
                <div class="fila-form-configuracion">
                <label>Nombre</label> <input name="" type="text" @bind="puestoActivo.Nombre" placeholder="@placeHolderNombre">
                </div>

                 @((MarkupString)ErrorNombre)

                <div class="fila-form-configuracion">
                <label>Salario</label> <input name="" type="number" step="any" @bind="puestoActivo.SalarioBruto" placeholder="@placeHolderSalario">
                </div>

                    <div class="fila-form-configuracion">
                    <label>Plazas</label> <input name="" type="number" @bind="puestoActivo.Plazas" placeholder="@placeHolderPlazas">
                    </div>
                </form>
                <button id="boton-beneficios"  @onclick="cambiarVisibilidadPopup"> Editar Beneficios</button>
            </div>

    </div>
    <div id="inferior-horizontal">
        <div id="guardar-puesto" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosPuesto(puestoActivo)">
            <a asp-controller="EstructuraOrg" asp-action="Index">
                @if (hoverGuardar == false) {
                    <img src="img/estructuraOrg/guardarPuesto.png" alt="">
                }
                @hoverTextGuardar</a>
        </div>
    </div>

</div>

<div class="altura-seccion" id="seccion-puestos">
    @*Seccion de puestos donde se ven los puestos en cajas con organigrama*@
    <div id="mostrar-puestos">
        @foreach (PuestoModel puestoActual in puestos)
        {
            <div class="puesto-clickeable-eliminable" >
                <div @onclick="() => SeleccionarPuesto(puestoActual)">
                    <PuestoParcialView puesto=puestoActual></PuestoParcialView>
                </div>
                <img @onclick="() => eliminarPuesto(puestoActual)" class="puesto-icono-eliminar" src=img/generic/trashCan.png>
            </div>
        }
    </div>
    <div id="agregar-puesto" class="transition" @onmouseover="() => Hover(1)" @onmouseout="() => HoverOut(1)" @onclick="AgregarNuevoPuesto">
        <a>
            @if (hoverAgregar == false)
            {
                <img src="img/estructuraOrg/addPuesto.png" alt="">
            }
            @hoverTextAgregar
            </a>
    </div>
</div>
@if (PopupVisible) {
    <div id="overlay" @onclick="cambiarVisibilidadPopup"></div>
    <div id="contenedor_beneficios">
        <h1 id="titulo_beneficios">Beneficios</h1>
        <table id=lista_beneficios>
            @if (puestoActivo.Beneficios.Count() > 0)
            {
                <tr>
                    <th style="border:none;">Nombre</th>
                    <th style="border:none;">Monto</th>
                    <th style="border:none;"> Plazas </th>
                    <th style="border:none;" width="40px"></th>
                </tr>
            }
            else
            {
                <tr>
                    <th style="border:none; text-align:center; opacity:0.5;"> No hay beneficios que mostrar</th>
                </tr>
            }
            @for (int i = 0; i < puestoActivo.Beneficios.Count(); i += 1)
            {
                int index = i;

                <tr class="filas_tabla_beneficio">
                    <td> @puestoActivo.Beneficios[index].nombreBeneficio</td>
                    <td> @puestoActivo.Beneficios[index].monto</td>
                    <td> @puestoActivo.Beneficios[index].plazasPorBeneficio </td>
                    <td class="columna-borrar-beneficio"><div class="borrar-beneficio" @onclick="()=>borrarBeneficio(puestoActivo.Beneficios[index])"><img src="img/puesto/trashCan.png" width="35px" height="35px"></div></td>
                </tr>
            }
        </table>
        @if (formVisible)
        {
            comodines.Add(new BeneficioModel());
            <h2>Nuevo beneficio</h2>
            <div id="tabla_form">
                <div id="container-input-nombre-beneficio">
                    <label for="nombreBeneficio">Nombre:</label>
                    <input id="input_nombre_beneficio" name="nombreBeneficio" @bind="comodines[comodinActual].nombreBeneficio">
                </div>
                <div id="container-input-monto-beneficio">
                    <label for="montoBeneficio">Monto:</label>
                    <input id="input_monto_beneficio" name="montoBeneficio" type="number" @bind="comodines[comodinActual].monto">
                </div>
                <div id="container-input-plazas-beneficio">
                    <label for="montoBeneficio">Plazas:</label>
                    <input id="input_plazas_beneficio" name="plazasBeneficio" type="number" @bind="comodines[comodinActual].plazasPorBeneficio">
                </div>
                <div id="seccion-guardar-beneficio">
                    <div id="boton-guardar-beneficio" @onclick="agregarBeneficioNuevo">
                        <img src="img/estructuraOrg/guardarPuesto.png" alt="" width="30px" height="30px">
                    </div>
                </div>
            </div>
        }
        <div id="botones_beneficios">
            @if (!formVisible)
            {
                <div id="boton-agregar-beneficio">
                    <img src="img/estructuraOrg/addPuesto.png" alt="" width="30px" height="30px" @onclick="cambiarVisibilidadForm">
                </div>
            }
            else
            {
                <div id="boton-cerrar-form-beneficio">
                    <img src="img/estructuraOrg/minus.png" alt="" width="30px" height="30px" @onclick="cambiarVisibilidadForm">
                </div>
            }
        </div>
        <div id="salir-popup-beneficios">
            <img src="img/estructuraOrg/x.png" alt="" width="15px" height="15px" @onclick="cambiarVisibilidadPopup">
        </div>
    </div>
}


@code {
    [Parameter]
    public List<PuestoModel> puestos { get; set; }

    [Parameter]
    public DateTime fechaAnalasis { get; set; }

    public bool hayPuestoSeleccionado = false;
    public PuestoModel puestoActivo = new PuestoModel();

    public bool PopupVisible { get; set; } = false;

    public EstructuraOrgHandler HandlerPuesto = new EstructuraOrgHandler();

    public string copiaNombreOriginal = "";

    public string placeHolderNombre = "Ingresar nombre";
    public string placeHolderSalario = "Ingresar salario";
    public string placeHolderPlazas = "Ingresar plazas";

    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";

    public bool hoverGuardar = false;
    public bool hoverAgregar = false;

    public string ErrorNombre = "";

    public void Hover(int action)
    {

        if (action == 1) {
            hoverTextAgregar = "Agregar Puesto";
            hoverAgregar = true;
        }
        else if (action == 2)
        {
            hoverGuardar = true;
            hoverTextGuardar = "Guardar datos";
        }
    }
    public void HoverOut(int action)
    {
        if (action == 1)
        {
            hoverTextAgregar = "";
            hoverAgregar = false;
        } else {
            hoverGuardar = false;
            hoverTextGuardar = "";
        }
    }

    public void cambiarVisibilidadPopup()
    {
        if (PopupVisible)
        {
            PopupVisible = false;
        }
        else
        {
            PopupVisible = true;
        }
    }

    public void SeleccionarPuesto(PuestoModel puestoSeleccionado)
    {
        puestoActivo = puestoSeleccionado;
        placeHolderNombre = puestoActivo.Nombre;
        placeHolderSalario = puestoActivo.SalarioBruto.ToString();
        placeHolderPlazas = puestoActivo.Plazas.ToString();
        copiaNombreOriginal = puestoActivo.Nombre;
        hayPuestoSeleccionado = true;
        ErrorNombre = "";
    }

    public void AgregarNuevoPuesto() {
        placeHolderNombre = "Ingresar nombre";
        placeHolderSalario = "Ingresar salario";
        placeHolderPlazas = "Ingresar plazas";
        hayPuestoSeleccionado = false;
        copiaNombreOriginal = "";
        puestoActivo = new PuestoModel();
        ErrorNombre = "";
    }

    public void GuardarDatosPuesto(PuestoModel puestoGuardar) {

        if (revisarNombre(puestoGuardar))
        {
            puestoGuardar.FechaAnalisis = fechaAnalasis;
            HandlerPuesto.InsertarPuesto(copiaNombreOriginal, puestoGuardar);
            if (hayPuestoSeleccionado == false)
            {
                puestoActivo = new PuestoModel();
            }
            ErrorNombre = "";
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); 
        }
    }

    private bool revisarNombre(PuestoModel puestoGuardar)
    {
        bool valido = true;
        if (string.IsNullOrWhiteSpace(puestoGuardar.Nombre))
        {
            ErrorNombre = "<p class=\"puesto-error-nombrevacio\">Error: ingrese un nombre para el puesto.</p>";
            valido = false;
        }
        if (!hayPuestoSeleccionado) {
            if (puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del gasto fijo ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
        } else {
            int index = puestos.IndexOf(puestoGuardar);
            puestos.Remove(puestoGuardar);
            if (puestos.Exists(x => x.Nombre.ToLower() == puestoGuardar.Nombre.ToLower()))
            {
                ErrorNombre = "<p class=\"puesto-error-nombrevacio\"> Error: el nombre del gasto fijo ya existe. <br> Cambie el nombre o seleccione y modifique el existente.</p>";
                valido = false;
            }
            puestos.Insert(index, puestoGuardar);
        }

        return valido;
    }

    public void eliminarPuesto(PuestoModel puestoEliminar)
    {
        HandlerPuesto.EliminarPuesto(puestoEliminar);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }


    public BeneficioModel comodin = new BeneficioModel();

    public List<BeneficioModel> comodines = new List<BeneficioModel>();

    int comodinActual = 0;

    public bool formVisible = false;

    public string html = "";

    Queue<Tuple<BeneficioModel, int>> cambiosBeneficios = new Queue<Tuple<BeneficioModel, int>>();

    public void agregarBeneficioNuevo()
    {
        EstructuraOrgHandler h = new EstructuraOrgHandler();
        comodines[comodinActual].fechaAnalisis = fechaAnalasis;
        comodines[comodinActual].nombrePuesto = puestoActivo.Nombre;
        formVisible = false;
        puestoActivo.Beneficios.Add(comodines[comodinActual]);
        h.AgregarBeneficio(comodines[comodinActual]);
        comodines.Add(new BeneficioModel());
        comodinActual += 1;
    }


    public void borrarBeneficio(BeneficioModel b)
    {
        b.fechaAnalisis = puestoActivo.FechaAnalisis;
        b.nombrePuesto = puestoActivo.Nombre;
        EstructuraOrgHandler h = new EstructuraOrgHandler();
        puestoActivo.Beneficios.Remove(b);
        h.BorrarBeneficio(b);

    }

    public void cambiarVisibilidadForm()
    {
        if (formVisible)
        {
            formVisible = false;
        }
        else
        {
            formVisible = true;
        }
    }

    public void refrescarPagina()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

