@using PI.Models
@using PI.Handlers
@inject NavigationManager NavigationManager;

<div class="altura-seccion" id="seccion-pestañas">
    <div id="titulo-contenido">
        @*Aqui se agrega lo de las pestanas*@
        @if (hayPuestoSeleccionado == false)
        {
            <h1>Nuevo puesto</h1>
        } else {
            <h1>Editar puesto</h1>
        }

        @if (pestanyaConfiguracionActiva == true)
        {
            <div id="cuadro_configuracion">

                <form id="form_configuracion">
                    <div class="fila-form-configuracion">
                    <label>Nombre</label> <input name="" type="text" @bind="puestoActivo.Nombre" placeholder="@placeHolderNombre">
                    </div>

                    <div class="fila-form-configuracion">
                    <label>Salario</label> <input name="" type="number" step="any" @bind="puestoActivo.SalarioBruto" placeholder="@placeHolderSalario">
                    </div>

                    <div class="fila-form-configuracion">
                    <label>Plazas</label> <input name="" type="number" @bind="puestoActivo.Plazas" placeholder="@placeHolderPlazas">
                    </div>
                </form>
            </div>
        }   
    </div>
    <div id="inferior-horizontal">
        <div id="@cssIdGuardar" @onmouseover="() => Hover(2)" @onmouseout="() => HoverOut(2)" @onclick="() => GuardarDatosPuesto(puestoActivo)">
            <a asp-controller="EstructuraOrg" asp-action="Index"><img style="@styleHover" src=" @imgGuadarPath" alt="">@hoverTextGuardar</a>
        </div>
    </div>
</div>

<div class="altura-seccion" id="seccion-puestos">
    @*Seccion de puestos donde se ven los puestos en cajas con organigrama*@
    <div id="mostrar-puestos">
        @foreach (PuestoModel puestoActual in puestos)
        {
            <div class="puesto-clickeable-eliminable" >
                <div @onclick="() => SeleccionarPuesto(puestoActual)">
                    <PuestoParcialView puesto=puestoActual></PuestoParcialView>
                </div>
                <img @onclick="eliminarPuesto" class="puesto-icono-eliminar" src=img/puesto/trashCan.png>
            </div>
        }
    </div>
    <div id="@cssIdAgregar" @onmouseover="() => Hover(1)" @onmouseout="() => HoverOut(1)" @onclick="AgregarNuevoPuesto">
        <a><img style="@styleHover" src=" @imgAgregarPath" alt="">@hoverTextAgregar</a>
    </div>
</div>


@code {
    [Parameter]
    public List<PuestoModel> puestos { get; set; }

    [Parameter]
    public DateTime fechaAnalasis { get; set; }

    public bool hayPuestoSeleccionado = false;
    public PuestoModel puestoActivo = new PuestoModel();

    public EstructuraOrgHandler HandlerPuesto = new EstructuraOrgHandler();

    public string copiaNombreOriginal = "";

    public string placeHolderNombre = "Ingresar nombre";
    public string placeHolderSalario = "Ingresar salario";
    public string placeHolderPlazas = "Ingresar plazas";

    public string imgAgregarPath = "img/estructuraOrg/addPuesto.png";
    public string imgGuadarPath = "img/estructuraOrg/guardarPuesto.png";

    public string hoverTextAgregar = "";
    public string hoverTextGuardar = "";

    public string styleHover = "";
    public string cssIdAgregar = "agregar-puesto";
    public string cssIdGuardar = "guardar-puesto";


    string htmlPuestosStr = "";

    bool pestanyaConfiguracionActiva = true;

    public void Hover(int action)
    {

        if (action == 1) {
            imgAgregarPath = "";
            hoverTextAgregar = "Agregar Puesto";
            cssIdAgregar = "agregar-puesto-hover";
        }
        else if (action == 2)
        {
            cssIdGuardar = "guardar-puesto-hover";
            imgGuadarPath = "";
            hoverTextGuardar = "Guardar datos";
        }
    }
    public void HoverOut(int action)
    {
        if (action == 1)
        {
            styleHover = "";
            cssIdAgregar = "agregar-puesto";
            imgAgregarPath = "img/estructuraOrg/addPuesto.png";
            hoverTextAgregar = "";
        } else {
            styleHover = "";
            hoverTextGuardar = "";
            imgGuadarPath = "img/estructuraOrg/guardarPuesto.png";
            cssIdGuardar = "guardar-puesto";
        }
    }

    public void SeleccionarPuesto(PuestoModel puestoSeleccionado)
    {
        puestoActivo = puestoSeleccionado;
        placeHolderNombre = puestoActivo.Nombre;
        placeHolderSalario = puestoActivo.SalarioBruto.ToString();
        placeHolderPlazas = puestoActivo.Plazas.ToString();
        copiaNombreOriginal = puestoActivo.Nombre;
        hayPuestoSeleccionado = true;

    }

    public void AgregarNuevoPuesto() {
        placeHolderNombre = "Ingresar nombre";
        placeHolderSalario = "Ingresar salario";
        placeHolderPlazas = "Ingresar plazas";
        hayPuestoSeleccionado = false;
        pestanyaConfiguracionActiva = true;
        puestoActivo = new PuestoModel();
    }

    public void GuardarDatosPuesto(PuestoModel puestoGuardar) {

        puestoGuardar.FechaAnalisis = fechaAnalasis;
        HandlerPuesto.InsertarPuesto(copiaNombreOriginal, puestoGuardar);
        if (hayPuestoSeleccionado == false)
        {
            puestoActivo = new PuestoModel();
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); 
    }
    public void eliminarPuesto()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}

