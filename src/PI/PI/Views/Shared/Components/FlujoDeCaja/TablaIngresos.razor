@using PI.Services;
@using PI.Handlers
@using PI.Models


<ul class="responsive-table">

    @*Header*@
    <li class="table-header">
        <div class="col col-1">
            <p>Ingresos</p>
        </div>
        <div class="col col-1">
            <p>Mes 1</p>
        </div>
        <div class="col col-1">
            <p>Mes 2</p>
        </div>
        <div class="col col-1">
            <p>Mes 3</p>
        </div>
        <div class="col col-1">
            <p>Mes 4</p>
        </div>
        <div class="col col-1">
            <p>Mes 5</p>
        </div>
        <div class="col col-1">
            <p>Mes 6</p>
        </div>
    </li>

    @*Flujo de caja mensual*@
    <FilaFlujoMensual />

    @*Totales*@
    <li class="table-row-totales">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Totales</p>
        </div>
        <div class="col col-1">
            @calcularIngresoMensualTotal("mes1")
        </div>
        <div class="col col-1">
            @calcularIngresoMensualTotal("mes2")
        </div>
        <div class="col col-1">
            @calcularIngresoMensualTotal("mes3")
        </div>
        <div class="col col-1">
            @calcularIngresoMensualTotal("mes4")
        </div>
        <div class="col col-1">
            @calcularIngresoMensualTotal("mes5")
        </div>
        <div class="col col-1">
            @calcularIngresoMensualTotal("mes6")
        </div>
    </li>

    @*Ventas de contado*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Ventas de contado</p>
        </div>    
        @foreach (var ingresoActual in ingresos.Where(t => t.Tipo == "contado"))
        {
            <div class="col col-1">
                @if (ingresoActual.estadoInput)
                {
                    <div class="div-datos w-100 h-100 text-center" @onmouseover="() => {ingresoActual.estadoInput = false;}">
                        <p>
                            @FormatManager.ToFormatoEstadistico(ingresoActual.Monto)
                        </p>
                    </div>
                }
                else
                {
                    <input class="effect-1 text-center"
                   type="text" maxlength=16
                   @onfocusout="() => {ingresoActual.estadoInput = true; actualizarIngreso(ingresoActual);}"
                   @bind="ingresoActual.Monto">
                    <span class="focus-border"></span>
                }
            </div>
        }
    </li>

    @*Ventas a credito*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Ventas a crédito</p>
        </div>
        @foreach (var ingresoActual in ingresos.Where(t => t.Tipo == "credito"))
        {
            <div class="col col-1">
                @if (ingresoActual.estadoInput)
                {
                    <div class="div-datos w-100 h-100 text-center" @onmouseover="() => {ingresoActual.estadoInput = false;}">
                        <p>
                            @FormatManager.ToFormatoEstadistico(ingresoActual.Monto)
                        </p>
                    </div>
                }
                else
                {
                    <input class="effect-1 text-center"
                   type="text" maxlength=16
                   @onfocusout="() => {ingresoActual.estadoInput = true; actualizarIngreso(ingresoActual);}"
                   @bind="ingresoActual.Monto">
                    <span class="focus-border"></span>
                }
            </div>
        }
    </li>

    @*Otros ingresos*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Otros ingresos</p>
        </div>
        @foreach (var ingresoActual in ingresos.Where(t => t.Tipo == "otros"))
        {
            <div class="col col-1">
                @if (ingresoActual.estadoInput)
                {
                    <div class="div-datos w-100 h-100 text-center" @onmouseover="() => {ingresoActual.estadoInput = false;}">
                        <p>
                            @FormatManager.ToFormatoEstadistico(ingresoActual.Monto)
                        </p>
                    </div>
                }
                else
                {
                    <input class="effect-1 text-center"
                   type="text" maxlength=16
                   @onfocusout="() => {ingresoActual.estadoInput = true; actualizarIngreso(ingresoActual);}"
                   @bind="ingresoActual.Monto">
                    <span class="focus-border"></span>
                }
            </div>
        }
    </li>

</ul>

@code {

    [Parameter]
    public List<IngresoModel> ingresos { get; set; }

    public FlujoDeCajaHandler flujoDeCajaHandler = new FlujoDeCajaHandler();

    public string calcularIngresoMensualTotal(string mes) 
    {
        return FormatManager.ToFormatoEstadistico(flujoDeCajaHandler.obtenerMontoTotaldeIngresosPorMes(mes, ingresos[0].FechaAnalisis));
    }

    public void actualizarIngreso(IngresoModel ingreso)
    {
        flujoDeCajaHandler.actualizarIngreso(ingreso);
    }

}
