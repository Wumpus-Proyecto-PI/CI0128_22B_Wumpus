@using BlazorCleave.Data
@using PI.Services;
@using PI.Handlers
@using PI.Models
@using BlazorCleave
@using System.Globalization

<ul class="responsive-table">

    @*Header*@
    <li class="table-header">
        <div class="col col-1">
            <p>Ingresos</p>
        </div>
        <div class="col col-1">
            <p>Mes 1</p>
        </div>
        <div class="col col-1">
            <p>Mes 2</p>
        </div>
        <div class="col col-1">
            <p>Mes 3</p>
        </div>
        <div class="col col-1">
            <p>Mes 4</p>
        </div>
        <div class="col col-1">
            <p>Mes 5</p>
        </div>
        <div class="col col-1">
            <p>Mes 6</p>
        </div>
    </li>

    @*Flujo de caja mensual*@
    <FilaFlujoMensual flujoMensual=flujoMensual />

    @*Totales*@
    <li class="table-row-totales">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Totales</p>
        </div>
        @foreach (var mes in meses)
        {
            <div class="col col-1">
                @calcularIngresoMensualTotal(mes.NombreMes)
            </div>
        }
    </li>

    @*Ventas de contado*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Ventas de contado</p>
        </div>
        @foreach (var ingresoActual in ingresos.Where(t => t.Tipo == "contado"))
        {
            <div class="col col-1">
                <Cleave NumeralType="NumeralTypes.Type.Thousand" InputType="InputType.Numeral"
                    class="effect-1 text-center input-montos" value="@FormatManager.ToFormatoEstadistico(ingresoActual.Monto)" 
                    @onchange="n => ingresoActual.Monto = Convert.ToDecimal(n.Value.ToString())"
                    @onfocusout="() => actualizarIngreso(ingresoActual)"
                 />
                    <span class="focus-border"></span>
            </div>
        }
    </li>

    @*Ventas a credito*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Ventas a crédito</p>
        </div>
        @foreach (var ingresoActual in ingresos.Where(t => t.Tipo == "credito"))
        {
            <div class="col col-1">
                <Cleave NumeralType="NumeralTypes.Type.Thousand" InputType="InputType.Numeral"
                    class="effect-1 text-center input-montos" value="@FormatManager.ToFormatoEstadistico(ingresoActual.Monto)"
                    @onchange="n => ingresoActual.Monto = Convert.ToDecimal(n.Value.ToString())"
                    @onfocusout="() => actualizarIngreso(ingresoActual)" />
                <span class="focus-border"></span>
            </div>
        }
    </li>

    @*Otros ingresos*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Otros ingresos</p>
        </div>
        @foreach (var ingresoActual in ingresos.Where(t => t.Tipo == "otros"))
        {
            <div class="col col-1">
                <Cleave NumeralType="NumeralTypes.Type.Thousand" InputType="InputType.Numeral"
                    class="effect-1 text-center input-montos" value="@FormatManager.ToFormatoEstadistico(ingresoActual.Monto)"
                    @onchange="n => ingresoActual.Monto = Convert.ToDecimal(n.Value.ToString())"
                    @onfocusout="() => actualizarIngreso(ingresoActual)" />
                <span class="focus-border"></span>
            </div>
        }
    </li>

</ul>

@code {

    [Parameter]
    public List<IngresoModel> ingresos { get; set; }

    [Parameter]
    public List<MesModel> meses { get; set; }

    // Lista con el monto monetario (decimal) del flujo mensual de cada mes.
    [Parameter]
    public List<string> flujoMensual { get; set; }

    public FlujoDeCajaHandler flujoDeCajaHandler = new FlujoDeCajaHandler();


    public string calcularIngresoMensualTotal(string mes)
    {
        return FormatManager.ToFormatoEstadistico(flujoDeCajaHandler.obtenerMontoTotalDeIngresosPorMes(mes, ingresos[0].FechaAnalisis));
    }

    public void actualizarIngreso(IngresoModel ingreso)
    {
        flujoDeCajaHandler.actualizarIngreso(ingreso);

        // Actualiza la lista del flujo mensual.
        flujoMensual = FlujoCajaService.ActualizarFlujosMensuales(meses);
    }
}
