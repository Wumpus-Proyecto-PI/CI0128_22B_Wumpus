@using PI.Handlers
@using PI.Models
@using PI.Services
@using BlazorCleave
@using BlazorCleave.Data
@using System.Globalization

<ul class="responsive-table">

    @*Header*@
    <li class="table-header sticky-top">
        <div class="col col-1">
            <p>Egresos</p>
        </div>
        <div class="col col-1">
            <p>Mes 1</p>
        </div>
        <div class="col col-1">
            <p>Mes 2</p>
        </div>
        <div class="col col-1">
            <p>Mes 3</p>
        </div>
        <div class="col col-1">
            <p>Mes 4</p>
        </div>
        <div class="col col-1">
            <p>Mes 5</p>
        </div>
        <div class="col col-1">
            <p>Mes 6</p>
        </div>
    </li>

    @*Flujo de caja mensual*@
    <FilaFlujoMensual />

    @*Totales*@
    <li class="table-row-totales">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Totales</p>
        </div>
        <div class="col col-1">
            0
        </div>
        <div class="col col-1">
            0
        </div>
        <div class="col col-1">
            0
        </div>
        <div class="col col-1">
            0
        </div>
        <div class="col col-1">
            0
        </div>
        <div class="col col-1">
            0
        </div>
    </li>

    @*Inversion inicial*@
    @if (estadoIniciado == false)
    {
        <li class="table-row">
            <div class="col col-1">
                <p class="datos-calculados texto-nombres">Inversión inicial</p>
            </div>
            <div class="col col-1">
                <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
                <span class="focus-border"></span>
            </div>
            <div class="col col-1">
                <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
                <span class="focus-border"></span>
            </div>
            <div class="col col-1">
                <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
                <span class="focus-border"></span>
            </div>
            <div class="col col-1">
                <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
                <span class="focus-border"></span>
            </div>
            <div class="col col-1">
                <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
                <span class="focus-border"></span>
            </div>
            <div class="col col-1">
                <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
                <span class="focus-border"></span>
            </div>
        </li>
    }

    @*Compras de contado*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Compras de contado</p>
        </div>
        @foreach (var egresoActual in egresos.Where(t => t.Tipo == "contado"))
        {
            <div class="col col-1">
                <Cleave NumeralType="NumeralTypes.Type.Thousand" InputType="InputType.Numeral"
                    class="effect-1 text-center input-montos" value="@FormatManager.ToFormatoEstadistico(egresoActual.Monto)"
                    @onchange="n => egresoActual.Monto = Convert.ToDecimal(n.Value.ToString())"
                    @onfocusout="() => actualizarEgreso(egresoActual)" />
                <span class="focus-border"></span>
            </div>
        }
    </li>

    @*Compras a credito*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Compras a crédito</p>
        </div>
        @foreach (var egresoActual in egresos.Where(t => t.Tipo == "credito"))
        {
            <div class="col col-1">
                <Cleave NumeralType="NumeralTypes.Type.Thousand" InputType="InputType.Numeral"
                    class="effect-1 text-center input-montos" value="@FormatManager.ToFormatoEstadistico(egresoActual.Monto)"
                    @onchange="n => egresoActual.Monto = Convert.ToDecimal(n.Value.ToString())"
                    @onfocusout="() => actualizarEgreso(egresoActual)" />
                <span class="focus-border"></span>
            </div>
        }
    </li>

    @*Otros egresos*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Otros egresos</p>
        </div>
        @foreach (var egresoActual in egresos.Where(t => t.Tipo == "otros"))
        {
            <div class="col col-1">
                <Cleave NumeralType="NumeralTypes.Type.Thousand" InputType="InputType.Numeral"
                    class="effect-1 text-center input-montos" value="@FormatManager.ToFormatoEstadistico(egresoActual.Monto)"
                    @onchange="n => egresoActual.Monto = Convert.ToDecimal(n.Value.ToString())"
                    @onfocusout="() => actualizarEgreso(egresoActual)" />
                <span class="focus-border"></span>
            </div>
        }
    </li>

    @*Salarios*@
    <li class="table-row">
        <div class="col col-1">
            <p class="datos-calculados texto-nombres">Salarios</p>
        </div>
        <div class="col col-1">
            <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
            <span class="focus-border"></span>
        </div>
        <div class="col col-1">
            <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
            <span class="focus-border"></span>
        </div>
        <div class="col col-1">
            <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
            <span class="focus-border"></span>
        </div>
        <div class="col col-1">
            <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
            <span class="focus-border"></span>
        </div>
        <div class="col col-1">
            <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
            <span class="focus-border"></span>
        </div>
        <div class="col col-1">
            <input class="effect-1 text-center" type="text" maxlength=16 @*@bind="productoActual.Precio" @onfocusout="() => actualizarPrecio(productoActual)" *@>
            <span class="focus-border"></span>
        </div>
    </li>

    @*Gastos fijos*@
    @foreach (var gasto in gastosFijos)
    {
        <li class="table-row">
            <div class="col col-1">
                <p class="datos-calculados texto-nombres">@gasto.Nombre</p>
            </div>
            <div class="col col-1">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico((gasto.Monto/12))</p>
            </div>
            <div class="col col-1">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico((gasto.Monto/12))</p>
            </div>
            <div class="col col-1">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico((gasto.Monto/12))</p>
            </div>
            <div class="col col-1">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico((gasto.Monto/12))</p>
            </div>
            <div class="col col-1">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico((gasto.Monto/12))</p>
            </div>
            <div class="col col-1">
                <p class="datos-calculados">@FormatManager.ToFormatoEstadistico((gasto.Monto/12))</p>
            </div>
        </li>
    }
</ul>

@code {
    [Parameter]
    public List<GastoFijoModel> gastosFijos { get; set; }

    [Parameter]
    public List<EgresoModel> egresos { get; set; }

    [Parameter]
    public bool estadoIniciado { get; set; }

    [Parameter]
    public decimal inversionInicial { get; set; }

    public FlujoDeCajaHandler flujoDeCajaHandler = new FlujoDeCajaHandler();

    public string calcularEgresoMensualTotal(string mes)
    {
        return FormatManager.ToFormatoEstadistico(flujoDeCajaHandler.obtenerMontoTotaldeEgresosPorMes(mes, egresos[0].FechaAnalisis));
    }

    public void actualizarEgreso(EgresoModel egreso)
    {
        flujoDeCajaHandler.actualizarEgreso(egreso);
    }

}
